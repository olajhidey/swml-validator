{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "SWMLObject.json",
  "type": "object",
  "properties": {
    "version": {
      "type": "string",
      "const": "1.0.0"
    },
    "sections": {
      "$ref": "#/$defs/Section"
    }
  },
  "required": [
    "sections"
  ],
  "title": "SWML Object",
  "$defs": {
    "Section": {
      "type": "object",
      "properties": {
        "main": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          }
        }
      },
      "required": [
        "main"
      ],
      "unevaluatedProperties": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SWMLMethod"
        }
      },
      "title": "SWML sections"
    },
    "SWMLMethod": {
      "anyOf": [
        {
          "$ref": "#/$defs/Answer"
        },
        {
          "$ref": "#/$defs/AI"
        },
        {
          "$ref": "#/$defs/Cond"
        },
        {
          "$ref": "#/$defs/Connect"
        },
        {
          "$ref": "#/$defs/Denoise"
        },
        {
          "$ref": "#/$defs/Execute"
        },
        {
          "$ref": "#/$defs/Goto"
        },
        {
          "$ref": "#/$defs/Label"
        },
        {
          "$ref": "#/$defs/LiveTranscribe"
        },
        {
          "$ref": "#/$defs/LiveTranslate"
        },
        {
          "$ref": "#/$defs/Hangup"
        },
        {
          "$ref": "#/$defs/JoinRoom"
        },
        {
          "$ref": "#/$defs/Play"
        },
        {
          "$ref": "#/$defs/Prompt"
        },
        {
          "$ref": "#/$defs/ReceiveFax"
        },
        {
          "$ref": "#/$defs/Record"
        },
        {
          "$ref": "#/$defs/RecordCall"
        },
        {
          "$ref": "#/$defs/Request"
        },
        {
          "$ref": "#/$defs/Return"
        },
        {
          "$ref": "#/$defs/SendDigits"
        },
        {
          "$ref": "#/$defs/SendFax"
        },
        {
          "$ref": "#/$defs/SendSMS"
        },
        {
          "$ref": "#/$defs/Set"
        },
        {
          "$ref": "#/$defs/Sleep"
        },
        {
          "$ref": "#/$defs/SIPRefer"
        },
        {
          "$ref": "#/$defs/StopDenoise"
        },
        {
          "$ref": "#/$defs/StopRecordCall"
        },
        {
          "$ref": "#/$defs/StopTap"
        },
        {
          "$ref": "#/$defs/Switch"
        },
        {
          "$ref": "#/$defs/Tap"
        },
        {
          "$ref": "#/$defs/Transfer"
        },
        {
          "$ref": "#/$defs/Unset"
        },
        {
          "$ref": "#/$defs/Pay"
        },
        {
          "$ref": "#/$defs/DetectMachine"
        },
        {
          "$ref": "#/$defs/UserEvent"
        }
      ],
      "title": "SWML methods"
    },
    "Answer": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "object",
          "properties": {
            "max_duration": {
              "type": "integer",
              "minimum": 7,
              "description": "Maximum time in seconds to wait for an answer. Cannot be less than `7` seconds. Defaults to 14400 seconds."
            },
            "codecs": {
              "type": "string",
              "description": "Comma-seperated string of codecs to offer.\n Valid codecs are: [`PCMU,PCMA,G722,G729,AMR-WB,OPUS,VP8,H264`]"
            }
          },
          "description": "Answers an incoming call.",
          "title": "answer",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "answer"
      ],
      "title": "Answer object",
      "unevaluatedProperties": false
    },
    "AI": {
      "type": "object",
      "properties": {
        "ai": {
          "type": "object",
          "properties": {
            "global_data": {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": {},
              "description": "A powerful and flexible environmental variable which can accept arbitrary data that is set initially in the SWML script\nor from the SWML `set_global_data` action. This data can be referenced `globally`.\nAll contained information can be accessed and expanded within the prompt - for example, by using a template string."
            },
            "hints": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/$defs/Hint"
                  }
                ]
              },
              "description": "Hints help the AI agent understand certain words or phrases better. Words that can commonly be misinterpreted can be added to the hints to help the AI speak more accurately."
            },
            "languages": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Languages"
              },
              "description": "An array of JSON objects defining supported languages in the conversation."
            },
            "params": {
              "$ref": "#/$defs/AIParams",
              "description": "A JSON object containing parameters as key-value pairs."
            },
            "post_prompt": {
              "$ref": "#/$defs/AIPostPrompt",
              "description": "The final set of instructions and configuration settings to send to the agent."
            },
            "post_prompt_url": {
              "type": "string",
              "format": "uri",
              "description": "The URL to which to send status callbacks and reports. Authentication can also be set in the url in the format of `username:password@url`."
            },
            "pronounce": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Pronounce"
              },
              "description": "An array of JSON objects to clarify the AI's pronunciation of words or expressions."
            },
            "prompt": {
              "$ref": "#/$defs/AIPrompt",
              "description": "Establishes the initial set of instructions and settings to configure the agent."
            },
            "SWAIG": {
              "$ref": "#/$defs/SWAIG",
              "description": "An array of JSON objects to create user-defined functions/endpoints that can be executed during the dialogue."
            }
          },
          "required": [
            "prompt"
          ],
          "description": "Create a new AI agent.",
          "title": "ai",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "ai"
      ],
      "title": "AI object",
      "unevaluatedProperties": false
    },
    "Cond": {
      "type": "object",
      "properties": {
        "cond": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/CondParams"
          },
          "description": "Execute a sequence of instructions depending on the value of a JavaScript condition.",
          "title": "cond"
        }
      },
      "required": [
        "cond"
      ],
      "title": "Cond object",
      "unevaluatedProperties": false
    },
    "Connect": {
      "type": "object",
      "properties": {
        "connect": {
          "oneOf": [
            {
              "$ref": "#/$defs/ConnectDeviceSingle"
            },
            {
              "$ref": "#/$defs/ConnectDeviceSerial"
            },
            {
              "$ref": "#/$defs/ConnectDeviceParallel"
            },
            {
              "$ref": "#/$defs/ConnectDeviceSerialParallel"
            }
          ],
          "description": "Dial a SIP URI or phone number."
        }
      },
      "required": [
        "connect"
      ],
      "title": "Connect object",
      "unevaluatedProperties": false
    },
    "Denoise": {
      "type": "object",
      "properties": {
        "denoise": {
          "type": "object",
          "properties": {},
          "description": "Start noise reduction. You can stop it at any time using `stop_denoise`.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "denoise"
      ],
      "title": "Denoise object",
      "unevaluatedProperties": false
    },
    "Execute": {
      "type": "object",
      "properties": {
        "execute": {
          "type": "object",
          "properties": {
            "dest": {
              "type": "string",
              "description": "Specifies what to execute. The value can be one of: \n<section_name> - section in the current document to execute.\nhttps://<URL>\" - URL pointing to the document to execute. Sends HTTP POST."
            },
            "params": {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": {},
              "description": "Named parameters to send to section or URL"
            },
            "meta": {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": {},
              "description": "User-defined metadata, ignored by SignalWire"
            },
            "on_return": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SWMLMethod"
              },
              "description": "The list of SWML instructions to be executed when the executed section or URL returns"
            },
            "result": {
              "anyOf": [
                {
                  "$ref": "#/$defs/ExecuteSwitch"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/CondParams"
                  },
                  "description": "Execute a sequence of instructions depending on the value of a JavaScript condition.",
                  "title": "cond"
                }
              ],
              "description": "`switch` on `return_value` if result is an object (`{}`), or use as a cond if result is an array (`[]`)"
            }
          },
          "required": [
            "dest"
          ],
          "description": "Execute a section or URL as a subroutine and return back to current document.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "execute"
      ],
      "title": "Execute object",
      "unevaluatedProperties": false
    },
    "Goto": {
      "type": "object",
      "properties": {
        "goto": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string",
              "description": "The name of the label in the current section to jump to."
            },
            "when": {
              "type": "string",
              "description": "The condition that triggers the `goto` jump."
            },
            "max": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "description": "The maximum number of times to perform the jump. Must be a number between 1 and 100."
            },
            "meta": {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": {},
              "description": "User-defined metadata to be stored with the jump. This metadata is ignored by SignalWire and the\ndefault is not set."
            }
          },
          "required": [
            "label"
          ],
          "description": "Jump to a specified label in the current SWML document.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "goto"
      ],
      "title": "Goto object",
      "unevaluatedProperties": false
    },
    "Label": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The name of the label in the current section to jump to."
        }
      },
      "required": [
        "label"
      ],
      "title": "Label object",
      "unevaluatedProperties": false
    },
    "LiveTranscribe": {
      "type": "object",
      "properties": {
        "live_transcribe": {
          "type": "object",
          "properties": {
            "action": {
              "$ref": "#/$defs/TranscribeAction",
              "description": "The action to perform during live transcription."
            }
          },
          "required": [
            "action"
          ],
          "description": "Starts live transcription of the call. The transcription will be sent to the specified URL.",
          "title": "live_transcribe",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "live_transcribe"
      ],
      "title": "LiveTranscribe object",
      "unevaluatedProperties": false
    },
    "LiveTranslate": {
      "type": "object",
      "properties": {
        "live_translate": {
          "type": "object",
          "properties": {
            "action": {
              "$ref": "#/$defs/TranslateAction",
              "description": "The action to perform during live translation."
            }
          },
          "required": [
            "action"
          ],
          "description": "Starts a live translation session of the call. The translation will be sent to the specified URL.",
          "title": "live_translate",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "live_translate"
      ],
      "title": "LiveTranslate object",
      "unevaluatedProperties": false
    },
    "Hangup": {
      "type": "object",
      "properties": {
        "hangup": {
          "type": "object",
          "properties": {
            "reason": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "hangup"
                },
                {
                  "type": "string",
                  "const": "busy"
                },
                {
                  "type": "string",
                  "const": "decline"
                }
              ],
              "description": "The reason for hanging up the call."
            }
          },
          "description": "Hangup the call.",
          "title": "hangup",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "hangup"
      ],
      "title": "Hangup object",
      "unevaluatedProperties": false
    },
    "JoinRoom": {
      "type": "object",
      "properties": {
        "join_room": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the room to join."
            }
          },
          "required": [
            "name"
          ],
          "description": "Joins a RELAY room.",
          "title": "join_room",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "join_room"
      ],
      "title": "JoinRoom object",
      "unevaluatedProperties": false
    },
    "Play": {
      "type": "object",
      "properties": {
        "play": {
          "oneOf": [
            {
              "$ref": "#/$defs/PlayWithURL"
            },
            {
              "$ref": "#/$defs/PlayWithURLS"
            }
          ],
          "description": "Play file(s), ringtones, speech or silence.",
          "title": "play"
        }
      },
      "required": [
        "play"
      ],
      "title": "Play object",
      "unevaluatedProperties": false
    },
    "Prompt": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "object",
          "properties": {
            "play": {
              "anyOf": [
                {
                  "$ref": "#/$defs/play_url"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/play_url"
                  }
                }
              ],
              "description": "URL or array of URLs to play.\nAllowed URLs are:\n    http:// or https:// - audio file to GET\n    ring:[duration:]<country code> - ring tone to play. For example: ring:us to play single ring or ring:20.0:us to play ring for 20 seconds.\n    say:<text to speak> - Sentence to say\n    silence: <duration> - seconds of silence to play"
            },
            "volume": {
              "type": "number",
              "minimum": -40,
              "maximum": 40,
              "description": "Volume level for the audio file.\nDefault is 0.\nValid range is -40 to 40."
            },
            "say_voice": {
              "type": "string",
              "description": "The voice to use for the text to speech.\nDefault is `Polly.Salli`."
            },
            "say_language": {
              "type": "string",
              "description": "The language to use for the text to speech.\nDefault is `en-US`."
            },
            "say_gender": {
              "type": "string",
              "description": "The gender to use for the text to speech.\nDefault is `female`."
            },
            "max_digits": {
              "type": "integer",
              "description": "Number of digits to collect.\nDefault is `1`."
            },
            "terminators": {
              "type": "string",
              "description": "Digits that terminate digit collection.\nDefault is not set."
            },
            "digit_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for next digit.\nDefault is `5.0` seconds."
            },
            "initial_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for start of input.\nDefault is `5.0` seconds."
            },
            "speech_timeout": {
              "type": "number",
              "description": "Max time in seconds to wait for speech result."
            },
            "speech_end_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for end of speech utterance."
            },
            "speech_language": {
              "type": "string",
              "description": "Language to detect speech in."
            },
            "speech_hints": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Words or phrases to help the speech recognition."
            },
            "speech_engine": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The engine that is selected for speech recognition. The engine must support the specified language.\n[Deepgram|Google| etc...] Default is not set (SignalWire picks the engine)."
            },
            "status_url": {
              "type": "string",
              "format": "uri",
              "description": "http or https URL to deliver prompt status events"
            }
          },
          "required": [
            "play"
          ],
          "description": "Play a prompt and wait for digit or speech input.\nSpeech detection is not enabled unless at least one speech parameter is set.\nIf only speech parameters are set (and no digit parameters), digit detection is not enabled.\nTo enable both digit and speech detection, set at least one parameter for each.",
          "title": "prompt",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "prompt"
      ],
      "title": "Prompt object",
      "unevaluatedProperties": false
    },
    "ReceiveFax": {
      "type": "object",
      "properties": {
        "receive_fax": {
          "type": "object",
          "properties": {
            "status_url": {
              "type": "string",
              "format": "uri",
              "description": "http or https URL to deliver receive_fax status events"
            }
          },
          "description": "Receive a fax being delivered to this call.",
          "title": "receive_fax",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "receive_fax"
      ],
      "title": "ReceiveFax object",
      "unevaluatedProperties": false
    },
    "Record": {
      "type": "object",
      "properties": {
        "record": {
          "type": "object",
          "properties": {
            "stereo": {
              "type": "boolean",
              "description": "If true, record in stereo.\nDefault is false."
            },
            "format": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "wav"
                },
                {
                  "type": "string",
                  "const": "mp3"
                }
              ],
              "description": "The format to record in. Can be `wav` or `mp3`.\nDefault is \"wav\"."
            },
            "direction": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "speak"
                },
                {
                  "type": "string",
                  "const": "listen"
                }
              ],
              "description": "Direction of the audio to record: \"speak\" for what party says, \"listen\" for what party hears.\nDefault is `speak`."
            },
            "terminators": {
              "type": "string",
              "description": "String of digits that will stop the recording when pressed."
            },
            "beep": {
              "type": "boolean",
              "description": "Play a beep before recording.\nDefault is `false`."
            },
            "input_sensitivity": {
              "type": "number",
              "description": "Input sensitivity for the recording.\nDefault is `44.0`."
            },
            "initial_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for the start of speech.\nDefault is `4.0` seconds."
            },
            "end_silence_timeout": {
              "type": "number",
              "description": "Time in seconds to wait in silence before ending the recording.\nDefault is `5.0` seconds."
            },
            "max_length": {
              "type": "number",
              "description": "Maximum length of the recording in seconds."
            },
            "status_url": {
              "type": "string",
              "description": "URL to send recording status events to."
            }
          },
          "description": "Record the call audio in the foreground. Use this, for example, to record voicemails.",
          "title": "record",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "record"
      ],
      "title": "Record object",
      "unevaluatedProperties": false
    },
    "RecordCall": {
      "type": "object",
      "properties": {
        "record_call": {
          "type": "object",
          "properties": {
            "control_id": {
              "type": "string",
              "description": "Identifier for this recording, to use with `stop_call_record`."
            },
            "stereo": {
              "type": "boolean",
              "description": "If `true`, record in stereo.\nDefault is `false`."
            },
            "format": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "wav"
                },
                {
                  "type": "string",
                  "const": "mp3"
                }
              ],
              "description": "The format to record in. It can be `wav` or `mp3`.\nDefault is `wav`."
            },
            "direction": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "speak"
                },
                {
                  "type": "string",
                  "const": "listen"
                },
                {
                  "type": "string",
                  "const": "both"
                }
              ],
              "description": "Direction of the audio to record: \"speak\" for what party says, \"listen\" for what party hears, \"both\" for what the party hears and says.\nDefault is `both`."
            },
            "terminators": {
              "type": "string",
              "description": "String of digits that will stop the recording when pressed."
            },
            "beep": {
              "type": "boolean",
              "description": "Play a beep before recording.\nDefault is `false`."
            },
            "input_sensitivity": {
              "type": "number",
              "description": "Input sensitivity for the recording.\nDefault is `44.0`."
            },
            "initial_timeout": {
              "type": "number",
              "description": "Time in seconds to wait for the start of speech.\nDefault is `0.0` seconds."
            },
            "end_silence_timeout": {
              "type": "number",
              "description": "Time in seconds to wait in silence before ending the recording.\nDefault is `0.0` seconds."
            },
            "max_length": {
              "type": "number",
              "description": "Maximum length of the recording in seconds."
            },
            "status_url": {
              "type": "string",
              "format": "uri",
              "description": "http or https URL to deliver record_call status events"
            }
          },
          "description": "Record call in the background.\nUnlike the `record` method, the `record_call` method will start the recording and continue executing the SWML script without allowing the recording to happen in the background.\nTo stop call recordings started with `record_call`, use the `stop_call_record` method.",
          "title": "record_call",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "record_call"
      ],
      "title": "RecordCall object",
      "unevaluatedProperties": false
    },
    "Request": {
      "type": "object",
      "properties": {
        "request": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL to which the request is to be sent."
            },
            "method": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "GET"
                },
                {
                  "type": "string",
                  "const": "POST"
                },
                {
                  "type": "string",
                  "const": "PUT"
                },
                {
                  "type": "string",
                  "const": "DELETE"
                }
              ],
              "description": "The HTTP method to be used for the request. Can be `GET`, `POST`, `PUT`, or `DELETE`."
            },
            "headers": {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": {},
              "description": "An object representing the headers to be included in the request."
            },
            "body": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {},
                  "unevaluatedProperties": {}
                }
              ],
              "description": "The body of the request. Can be a `string` or an `object`."
            },
            "timeout": {
              "type": "number",
              "description": "Maximum time in seconds to wait for a response.\nDefault is `5.0` seconds."
            },
            "connect_timeout": {
              "type": "number",
              "description": "Maximum time in seconds to wait for a connection.\nDefault is `5.0` seconds."
            },
            "result": {
              "anyOf": [
                {
                  "$ref": "#/$defs/Switch"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/Cond"
                  }
                }
              ],
              "description": "`switch` on `return_value` if result is an object (`{}`), or use as a cond if result is an array (`[]`)."
            },
            "save_variables": {
              "type": "boolean",
              "description": "Store parsed JSON response as variables.\nDefault is `false`."
            }
          },
          "required": [
            "url",
            "method"
          ],
          "description": "Send a GET, POST, PUT, or DELETE request to a remote URL.",
          "title": "request",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "request"
      ],
      "title": "Request object",
      "unevaluatedProperties": false
    },
    "Return": {
      "type": "object",
      "properties": {
        "return": {
          "description": "Return from `execute` or exit script. Takes user-defined key to be used to store the value.",
          "title": "return"
        }
      },
      "required": [
        "return"
      ],
      "title": "Return object",
      "unevaluatedProperties": false
    },
    "SendDigits": {
      "type": "object",
      "properties": {
        "send_digits": {
          "type": "object",
          "properties": {
            "digits": {
              "type": "string",
              "description": "The DTMF digits to send."
            }
          },
          "required": [
            "digits"
          ],
          "description": "Send DTMF digits.",
          "title": "send_digits",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "send_digits"
      ],
      "title": "SendDigits object",
      "unevaluatedProperties": false
    },
    "SendFax": {
      "type": "object",
      "properties": {
        "send_fax": {
          "type": "object",
          "properties": {
            "document": {
              "type": "string",
              "format": "uri",
              "description": "URL to the PDF document to fax."
            },
            "header_info": {
              "type": "string",
              "description": "Header text to include on the fax."
            },
            "identity": {
              "type": "string",
              "description": "Station identity to report.\nDefault is the calling party's caller ID number."
            },
            "status_url": {
              "type": "string",
              "format": "uri",
              "description": "http or https URL to deliver send_fax status events"
            }
          },
          "required": [
            "document"
          ],
          "description": "Send a fax.",
          "title": "send_fax",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "send_fax"
      ],
      "title": "SendFax object",
      "unevaluatedProperties": false
    },
    "SendSMS": {
      "type": "object",
      "properties": {
        "send_sms": {
          "oneOf": [
            {
              "$ref": "#/$defs/SMSWithBody"
            },
            {
              "$ref": "#/$defs/SMSWithMedia"
            }
          ],
          "description": "Send a text message to a PSTN phone number.",
          "title": "send_sms"
        }
      },
      "required": [
        "send_sms"
      ],
      "title": "SendSMS object",
      "unevaluatedProperties": false
    },
    "Set": {
      "type": "object",
      "properties": {
        "set": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "Set script variables to the specified values.\nNo specific parameters.\nAccepts an object mapping variable names to values.",
          "title": "set"
        }
      },
      "required": [
        "set"
      ],
      "title": "Set object",
      "unevaluatedProperties": false
    },
    "Sleep": {
      "type": "object",
      "properties": {
        "sleep": {
          "type": "integer",
          "minimum": -1,
          "description": "The amount of time to sleep in milliseconds. Must be a `positive integer`. Can also be set to a `-1` integer for the sleep to never end.",
          "title": "sleep"
        }
      },
      "required": [
        "sleep"
      ],
      "title": "Sleep object",
      "unevaluatedProperties": false
    },
    "SIPRefer": {
      "type": "object",
      "properties": {
        "sip_refer": {
          "type": "object",
          "properties": {
            "to_uri": {
              "type": "string",
              "description": "The SIP URI to send the REFER to."
            }
          },
          "description": "Send SIP REFER to a SIP call.",
          "title": "sip_refer",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "sip_refer"
      ],
      "title": "SIPRefer object",
      "unevaluatedProperties": false
    },
    "StopDenoise": {
      "type": "object",
      "properties": {
        "stop_denoise": {
          "type": "object",
          "properties": {},
          "description": "Stops the current denoise session.",
          "title": "stop_denoise",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "stop_denoise"
      ],
      "title": "StopDenoise object",
      "unevaluatedProperties": false
    },
    "StopRecordCall": {
      "type": "object",
      "properties": {
        "stop_record_call": {
          "type": "object",
          "properties": {
            "control_id": {
              "type": "string",
              "description": "Identifier for the recording to stop.\nIf not set, the last recording started will be stopped."
            }
          },
          "description": "Stop an active background recording.",
          "title": "stop_record_call",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "stop_record_call"
      ],
      "title": "StopRecordCall object",
      "unevaluatedProperties": false
    },
    "StopTap": {
      "type": "object",
      "properties": {
        "stop_tap": {
          "type": "object",
          "properties": {
            "control_id": {
              "type": "string",
              "description": "ID of the tap to stop.\nIf not set, it will shut off the most recent tap session."
            }
          },
          "description": "Stop an active tap stream.",
          "title": "stop_tap",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "stop_tap"
      ],
      "title": "StopTap object",
      "unevaluatedProperties": false
    },
    "Switch": {
      "type": "object",
      "properties": {
        "switch": {
          "type": "object",
          "properties": {
            "variable": {
              "type": "string",
              "description": "Name of the variable whose value needs to be compared"
            },
            "case": {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/SWMLMethod"
                }
              },
              "description": "Object of values mapped to array of instructions to execute"
            },
            "default": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SWMLMethod"
              },
              "description": "Array of instructions to execute if no cases match"
            }
          },
          "required": [
            "variable",
            "case"
          ],
          "description": "Execute a sequence of instructions depending on which value matches a variable.",
          "title": "switch",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "switch"
      ],
      "title": "Switch object",
      "unevaluatedProperties": false
    },
    "Tap": {
      "type": "object",
      "properties": {
        "tap": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string",
              "description": "Destination of the tap media stream."
            },
            "control_id": {
              "type": "string",
              "description": "Identifier for this tap to use with `stop_tap`."
            },
            "direction": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "speak"
                },
                {
                  "type": "string",
                  "const": "listen"
                },
                {
                  "type": "string",
                  "const": "both"
                }
              ],
              "description": "Direction of the audio to tap:\n    `speak` for what party says,\n    `listen` for what party hears,\n    `both` for what party hears and says.\n    Default is `speak`"
            },
            "codec": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "PCMU"
                },
                {
                  "type": "string",
                  "const": "PCMA"
                }
              ],
              "description": "Codec to use for the tap media stream.\nPossible Values: [`PCMU`, `PCMA`]\nDefault is `PCMU`"
            },
            "rtp_ptime": {
              "type": "integer",
              "description": "If `uri` is a `rtp://` this will set the packetization time of the media in milliseconds.\nDefault is `20` miliseconds."
            },
            "status_url": {
              "type": "string",
              "format": "uri",
              "description": "http or https URL to deliver tap status events"
            }
          },
          "required": [
            "uri"
          ],
          "description": "Start background call tap. Media is streamed over Websocket or RTP to customer controlled URI.",
          "title": "tap",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "tap"
      ],
      "title": "Tap object",
      "unevaluatedProperties": false
    },
    "Transfer": {
      "type": "object",
      "properties": {
        "transfer": {
          "type": "object",
          "properties": {
            "dest": {
              "type": "string",
              "description": "Specifies where to transfer the call. The value can be one of:\n    - `<section_name>` - section in the SWML document to jump to.\n    - `https://<URL>` - URL pointing to the document to transfer to. Sends HTTP POST."
            },
            "params": {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": {},
              "description": "Named parameters to send to transfer destination.\nAccepts an object mapping variable names to values.\nDefault is not set."
            },
            "meta": {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": {},
              "description": "User data, ignored by SignalWire.\nAccepts an object mapping variable names to values.\nDefault is not set."
            }
          },
          "required": [
            "dest"
          ],
          "description": "Transfer the execution of the script to a new URL or SWML Section.",
          "title": "transfer",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "transfer"
      ],
      "title": "Transfer object",
      "unevaluatedProperties": false
    },
    "Unset": {
      "type": "object",
      "properties": {
        "unset": {
          "type": "object",
          "properties": {
            "vars": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "description": "Names of the variables to unset."
            }
          },
          "required": [
            "vars"
          ],
          "description": "Un set a variable that as been `set`.",
          "title": "unset",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "unset"
      ],
      "title": "Unset object",
      "unevaluatedProperties": false
    },
    "Pay": {
      "type": "object",
      "properties": {
        "pay": {
          "type": "object",
          "properties": {
            "payment_connector_url": {
              "type": "string",
              "format": "uri",
              "description": "The URL to make POST requests with all the gathered payment details.\nThis URL is used to process the final payment transaction and return the results through the response.\n\nVisit https://developer.signalwire.com//swml/methods/pay/payment_connector_url for more important information."
            },
            "charge_amount": {
              "type": "string",
              "description": "The amount to charge against payment method passed in the request. `Float` value with no currency prefix passed as string."
            },
            "currency": {
              "type": "string",
              "description": "Uses the ISO 4217 currency code of the charge amount. Default is `usd`."
            },
            "description": {
              "type": "string",
              "description": "Custom description of the payment provided in the request."
            },
            "input": {
              "type": "string",
              "const": "dtmf",
              "description": "The method of how to collect the payment details. Currently only `dtmf` mode is supported."
            },
            "language": {
              "type": "string",
              "description": "The language of the payment prompt. Default is `en-US`.\n\nSupported languages can be found here: https://developer.signalwire.com/swml/methods/pay/language"
            },
            "max_attempts": {
              "type": "integer",
              "description": "Number of times the `pay` method will retry to collect payment details. Default is `1`."
            },
            "min_postal_code_length": {
              "type": "integer",
              "description": "The minimum length of the postal code the user must enter. Default is `0`."
            },
            "parameters": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/PayParameters"
              },
              "description": "Array of parameter objects to pass to your payment processor. The parameters are user-defined key-value pairs."
            },
            "payment_method": {
              "type": "string",
              "const": "credit-card",
              "description": "Indicates the payment method which is going to be used in this payment request. Currently only `credit-card` is supported."
            },
            "postal_code": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Takes `true`, `false` or real postalcode (if it's known beforehand) to let pay method know whether to prompt for postal code."
            },
            "prompts": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/PayPrompts"
              },
              "description": "Array of prompt objects for customizing the audio prompts during different stages of the payment process."
            },
            "security_code": {
              "type": "boolean",
              "description": "Takes true or false to let pay method know whether to prompt for security code. Default is `true`."
            },
            "status_url": {
              "type": "string",
              "format": "uri",
              "description": "The URL to send requests for each status change during the payment process.\n\nSee http://localhost:3000/swml/methods/pay#status_url_request_body for more important information."
            },
            "timeout": {
              "type": "integer",
              "description": "Limit in seconds that pay method waits for the caller to press another digit before moving on to validate the digits captured."
            },
            "token_type": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "one-time"
                },
                {
                  "type": "string",
                  "const": "reusable"
                }
              ],
              "description": "Whether the payment is a one off payment or re-occurring. Default is `reusable`.\n\nAllowed values: \n- `one-time`\n- `reusable`"
            },
            "valid_card_types": {
              "type": "string",
              "description": "List of payment cards allowed to use in the requested payment process separated by space.\n\nAllowed values: \n- `visa`\n- `mastercard`\n- `amex`\n- `maestro`\n- `discover`\n- `jcb`\n- `diners-club`"
            },
            "error_type": {
              "type": "string",
              "description": "Space-separated list of error types this prompt applies to.\n\nAllowed Error Types: \n- `payment-card-number` - Collect the payment card number.\n- `expiration-date` - Collect the payment card expiration date.\n- `security-code` - Collect the payment card security code.\n- `postal-code` - Collect the payment card postal code.\n- `payment-processing` - The step used during the payment processing.\n- `payment-completed` - The step used when the payment is completed.\n- `payment-failed` - The step used when the payment fails.\n- `payment-canceled` - The step used when the payment is cancelled."
            },
            "voice": {
              "type": "string",
              "description": "Text-to-speech voice to use. Defaults is 'woman'. Please refer to https://developer.signalwire.com//voice/getting-started/voice-and-languages for more information."
            }
          },
          "required": [
            "payment_connector_url"
          ],
          "description": "The `pay` object. Enables secure payment processing during a call.\n When implemented, it handles the complete payment flow including data collection, validation, and processing through your configured\n payment gateway.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "pay"
      ],
      "unevaluatedProperties": false
    },
    "DetectMachine": {
      "type": "object",
      "properties": {
        "detect_machine": {
          "type": "object",
          "properties": {
            "detect_message_end": {
              "type": "boolean",
              "description": "If `true`, stops detection on beep / end of voicemail greeting. Default `false`."
            },
            "detectors": {
              "type": "string",
              "description": "Comma-separated string: detectors to enable. Default: `amd,fax`."
            },
            "end_silence_timeout": {
              "type": "number",
              "minimum": 0,
              "description": "How long to wait for voice to finish. Default 1.0."
            },
            "initial_timeout": {
              "type": "number",
              "minimum": 0,
              "description": "How long to wait for initial voice before giving up. Default 4.5."
            },
            "machine_ready_timeout": {
              "type": "number",
              "minimum": 0,
              "description": "How long to wait for voice to finish before firing READY event. Default is `end_silence_timeout`."
            },
            "machine_voice_threshold": {
              "type": "number",
              "minimum": 0,
              "description": "How much voice in ms to decide MACHINE. Default 1.25."
            },
            "machine_words_threshold": {
              "type": "integer",
              "minimum": 0,
              "description": "How many words to count to decide MACHINE. Default 6."
            },
            "status_url": {
              "type": "string",
              "description": "The http(s) URL to deliver detector events to."
            },
            "timeout": {
              "type": "number",
              "minimum": 0,
              "description": "The max time to run detector. Default 30.0 seconds."
            },
            "tone": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "CED"
                },
                {
                  "type": "string",
                  "const": "CNG"
                }
              ],
              "description": "The tone to detect, will only receive remote side tone. Default `CED`."
            },
            "wait": {
              "type": "boolean",
              "description": "If `false`, the detector will run asynchronously and `status_url` must be set. Default `true`."
            }
          },
          "description": "A detection method that is a combination of AMD (Answer Machine Detection) and Fax detection.\nDetect if the user on the other end of the call is a machine (fax, voicemail, etc.) or a `human`.\nThe detection result(s) will be sent to the declared `status_url` as a POST request.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "detect_machine"
      ],
      "title": "DetectMachine Object",
      "unevaluatedProperties": false
    },
    "UserEvent": {
      "type": "object",
      "properties": {
        "user_event": {
          "type": "object",
          "properties": {
            "event": {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": {}
            }
          },
          "required": [
            "event"
          ],
          "description": "Allows the user to set and send events to the connected client on the call.\nThis is useful for triggering actions on the client side.\nCommonly used with the [browser-sdk](https://developer.signalwire.com/sdks/reference/browser-sdk/SignalWire%20Client/).\nThe event object can be any valid JSON object.\nAny key-value pair in the object is sent to the client as an event type called `user_event`.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "user_event"
      ],
      "title": "user_event Object",
      "unevaluatedProperties": false
    },
    "Hint": {
      "type": "object",
      "properties": {
        "hint": {
          "type": "string",
          "description": "The hint to match. This will match the string exactly as provided"
        },
        "pattern": {
          "type": "string",
          "description": "A regular expression to match the hint against. This will ensure that the hint has a valid matching pattern before being replaced."
        },
        "replace": {
          "type": "string",
          "description": "The text to replace the hint with. This will replace the portion of the hint that matches the pattern."
        },
        "ignore_case": {
          "type": "boolean",
          "description": "If true, the hint will be matched in a case-insensitive manner. Defaults to false."
        }
      },
      "required": [
        "hint",
        "pattern",
        "replace"
      ],
      "unevaluatedProperties": false
    },
    "Languages": {
      "anyOf": [
        {
          "$ref": "#/$defs/LanguagesWithSoloFillers"
        },
        {
          "$ref": "#/$defs/LanguagesWithFillers"
        }
      ],
      "title": "languages"
    },
    "AIParams": {
      "type": "object",
      "properties": {
        "acknowledge_interruptions": {
          "type": "boolean",
          "description": "Instructs the agent to acknowledge crosstalk and confirm user input when the user speaks over the agent."
        },
        "ai_model": {
          "anyOf": [
            {
              "type": "string",
              "const": "gpt-4o-mini"
            },
            {
              "type": "string",
              "const": "gpt-4.1-mini"
            },
            {
              "type": "string",
              "const": "gpt-4.1-nano"
            }
          ],
          "description": "The model to use for the AI. Allowed values are `gpt-4o-mini`, `gpt-4.1-mini`, and `gpt-4.1-nano`."
        },
        "ai_volume": {
          "type": "integer",
          "minimum": -50,
          "maximum": 50,
          "description": "Adjust the volume of the AI. Allowed values from `-50` - `50`."
        },
        "attention_timeout": {
          "anyOf": [
            {
              "$ref": "#/$defs/AttentionTimeout"
            },
            {
              "type": "number",
              "const": 0
            }
          ],
          "description": "Amount of time, in ms, to wait before prompting the user to respond. Allowed values from `10,000` - `600,000`. Set to `0` to disable."
        },
        "attention_timeout_prompt": {
          "type": "string",
          "description": "A custom prompt that is fed into the AI when the attention_timeout is reached."
        },
        "asr_diarize": {
          "type": "boolean",
          "description": "If true, enables speaker diarization in ASR (Automatic Speech Recognition).\nThis will break up the transcript into chunks, with each chunk containing a unique identity (e.g speaker1, speaker2, etc.)\nand the text they spoke.\n**Default:** `false`"
        },
        "asr_speaker_affinity": {
          "type": "boolean",
          "description": "If true, will force the AI Agent to only respond to the speaker who reesponds to the AI Agent first.\nAny other speaker will be ignored.\n**Default:** `false`"
        },
        "audible_debug": {
          "type": "boolean",
          "description": "If `true`, the AI will announce the function that is being executed on the call. The default is `false`."
        },
        "background_file": {
          "type": "string",
          "format": "uri",
          "description": "URL of audio file to play in the background while AI plays in foreground."
        },
        "background_file_loops": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "description": "Maximum number of times to loop playing the background file. `undefined` means loop indefinitely."
        },
        "background_file_volume": {
          "type": "integer",
          "minimum": -50,
          "maximum": 50,
          "description": "Defines background_file volume within a range of `-50` to `50`."
        },
        "barge_match_string": {
          "type": "string",
          "description": "Takes a string, including a regular expression, defining barge behavior.\n For example, this param can direct the AI to stop when the word 'hippopotomus' is input."
        },
        "barge_min_words": {
          "type": "integer",
          "minimum": 1,
          "maximum": 99,
          "description": "\tDefines the number of words that must be input before triggering barge behavior, in a range of `1-99`."
        },
        "conscience": {
          "type": "string",
          "description": "Sets the prompt which binds the agent to its purpose."
        },
        "conversation_id": {
          "type": "string",
          "description": "Used by `check_for_input` and `save_conversation` to identify an individual conversation."
        },
        "debug_webhook_level": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2,
          "description": "Enables debugging to the set URL. Allowed values from `0` - `2`. Default is `1` if url is set."
        },
        "debug_webhook_url": {
          "type": "string",
          "format": "uri",
          "description": "Each interaction between the AI and end user is posted in real time to the established URL."
        },
        "direction": {
          "$ref": "#/$defs/Direction",
          "description": "Forces the direction of the call to the assistant. Valid values are `inbound` and `outbound`."
        },
        "digit_terminators": {
          "type": "string",
          "description": "DTMF digit, as a string, to signal the end of input (ex: '#')"
        },
        "digit_timeout": {
          "type": "integer",
          "minimum": 250,
          "maximum": 10000,
          "description": "Time, in ms, at the end of digit input to detect end of input. Allowed values from `250` - `10,000`."
        },
        "end_of_speech_timeout": {
          "type": "integer",
          "minimum": 250,
          "maximum": 10000,
          "description": "Amount of silence, in ms, at the end of an utterance to detect end of speech. Allowed values from `250` - `10,000`."
        },
        "eleven_labs_stability": {
          "type": "number",
          "minimum": 0.01,
          "maximum": 1,
          "description": "The stability slider determines how stable the voice is and the randomness between each generation. Lowering this slider introduces a broader emotional range for the voice."
        },
        "eleven_labs_similarity": {
          "type": "number",
          "minimum": 0.01,
          "maximum": 1,
          "description": "The similarity slider dictates how closely the AI should adhere to the original voice when attempting to replicate it. The higher the similarity, the closer the AI will sound to the original voice."
        },
        "enable_thinking": {
          "type": "boolean",
          "description": "Enables thinking output for the AI Agent. \nWhen set to `true`, the AI Agent will be able to utilize thinking capabilities.\n**Important**: This may introduce a little bit of latency as the AI will use an additional turn in the conversation to think about the query."
        },
        "enable_vision": {
          "type": "boolean",
          "description": "Enables visual input processing for the AI Agent. \nWhen set to `true`, the AI Agent will be able to utilize visual processing capabilities, while leveraging the `get_visual_input` function."
        },
        "energy_level": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Amount of energy necessary for bot to hear you (in dB). Allowed values from `0.0` - `100.0`."
        },
        "function_wait_for_talking": {
          "type": "boolean",
          "description": "If `true`, the AI will wait for any `filler` to finish playing before executing a function. \nIf `false`, the AI will execute a function asynchronously as the `filler` plays. \nDefault is `false`."
        },
        "hard_stop_prompt": {
          "type": "string",
          "description": "A final prompt that is fed into the AI when the `hard_stop_time` is reached."
        },
        "hard_stop_time": {
          "type": "string",
          "pattern": "^(?:\\d+h)?(?:\\d+m)?(?:\\d+s)?$",
          "description": "Specifies the maximum duration fopr the AI Agent to remain active before it exists the session. \nAfter the timeout, the AI will stop responding, and will proceed with the next SWML instruction.\n\n**Time Format:**\n  - Seconds Format: `30s`\n  - Minutes Format: `2m`\n  - Hours Format: `1h`\n  - Combined Format: `1h45m30s`"
        },
        "hold_music": {
          "type": "string",
          "format": "uri",
          "description": "A URL for the hold music to play, accepting WAV, mp3, and FreeSWITCH tone_stream."
        },
        "hold_on_process": {
          "type": "boolean",
          "description": "Enables hold music during SWAIG processing."
        },
        "inactivity_timeout": {
          "type": "integer",
          "minimum": 10000,
          "maximum": 3600000,
          "description": "Amount of time, in ms, to wait before exiting the app due to inactivity. Allowed values from `10,000` - `3,600,000`."
        },
        "initial_sleep_ms": {
          "type": "integer",
          "minimum": 0,
          "maximum": 300000,
          "description": "Amount of time, in ms, to wait before starting the conversation. Allowed values from `0` - `300,000`."
        },
        "input_poll_freq": {
          "type": "string",
          "description": "Check for input function with check_for_input. \nExample use case: Feeding an inbound SMS to AI on a voice call, eg., for collecting an email address or other complex information."
        },
        "interrupt_on_noise": {
          "type": "boolean",
          "description": "When enabled, barges agent upon any sound interruption longer than 1 second."
        },
        "interrupt_prompt": {
          "type": "string",
          "description": "Provide a prompt for the agent to handle crosstalk."
        },
        "languages_enabled": {
          "type": "boolean",
          "description": "Allows multilingualism when `true`."
        },
        "local_tz": {
          "type": "string",
          "description": "The local timezone setting for the AI. Value should use `IANA TZ ID`"
        },
        "llm_diarize_aware": {
          "type": "boolean",
          "description": "If true, the AI Agent will be involved with the diarization process.\nUsers can state who they are at the start of the conversation and\nthe AI Agent will be able to correctly identify them when they are speaking later in the conversation.\n**Default:** `false`"
        },
        "openai_asr_engine": {
          "anyOf": [
            {
              "type": "string",
              "const": "nova-2"
            },
            {
              "type": "string",
              "const": "nova-3"
            }
          ],
          "description": "The OpenAI ASR (Automatic Speech Recognition) engine to use. Allowed values are `nova-2` and `nova-3`. Defaults to `nova-3`."
        },
        "outbound_attention_timeout": {
          "type": "integer",
          "minimum": 10000,
          "maximum": 600000,
          "description": "Sets a time duration for the outbound call recipient to respond to the AI agent before timeout, in a range from `10000` to `600000`."
        },
        "save_conversation": {
          "type": "boolean",
          "description": "Send a summary of the conversation after the call ends.\nThis requires a `post_url` to be set in the ai parameters and the `conversation_id` defined below.\nThis eliminates the need for a `post_prompt` in the ai parameters."
        },
        "static_greeting": {
          "type": "string",
          "description": "The static greeting to play when the call is answered. This will always play at the beginning of the call."
        },
        "static_greeting_no_barge": {
          "type": "boolean",
          "description": "If `true`, the static greeting will not be interrupted by the user if they speak over the greeting. If `false`, the static greeting can be interrupted by the user if they speak over the greeting."
        },
        "swaig_allow_settings": {
          "type": "boolean",
          "description": "Allows tweaking any of the indicated settings, such as `barge_match_string`, using the returned SWML from the SWAIG function."
        },
        "swaig_allow_swml": {
          "type": "boolean",
          "description": "Allows your SWAIG to return SWML to be executed."
        },
        "swaig_post_conversation": {
          "type": "boolean",
          "description": "Post entire conversation to any SWAIG call."
        },
        "thinking_model": {
          "anyOf": [
            {
              "type": "string",
              "const": "gpt-4o-mini"
            },
            {
              "type": "string",
              "const": "gpt-4.1-mini"
            },
            {
              "type": "string",
              "const": "gpt-4.1-nano"
            }
          ],
          "description": "The model to use for the AI's thinking capabilities. Allowed values are `gpt-4o-mini`, `gpt-4.1-mini`, and `gpt-4.1-nano`."
        },
        "transparent_barge": {
          "type": "boolean",
          "description": "When enabled, the AI will not respond to the user's input when the user is speaking over the agent. \nThe agent will wait for the user to finish speaking before responding. \nAdditionally, any attempt the LLM makes to barge will be ignored and scraped from the conversation logs."
        },
        "transfer_summary": {
          "type": "boolean",
          "description": "Pass a summary of a conversation from one AI agent to another. For example, transfer a call summary between support agents in two departments."
        },
        "tts_number_format": {
          "anyOf": [
            {
              "type": "string",
              "const": "international"
            },
            {
              "type": "string",
              "const": "national"
            }
          ],
          "description": "The format for the AI agent to reference phone numbers. \nAllowed values are `international` and `national`. \nDefaults to `international`.\n\n**Example:**\n- `international`: `+12345678901`\n- `national`: `(234) 567-8901`"
        },
        "verbose_logs": {
          "type": "boolean",
          "description": "Enable verbose logging."
        },
        "video_listening_file": {
          "type": "string",
          "format": "uri",
          "description": "URL of a video file to play when AI is listening to the user speak. Only works for calls that support video."
        },
        "video_idle_file": {
          "type": "string",
          "format": "uri",
          "description": "URL of a video file to play when AI is idle. Only works for calls that support video."
        },
        "video_talking_file": {
          "type": "string",
          "format": "uri",
          "description": "URL of a video file to play when AI is talking. Only works for calls that support video."
        },
        "vision_model": {
          "anyOf": [
            {
              "type": "string",
              "const": "gpt-4o-mini"
            },
            {
              "type": "string",
              "const": "gpt-4.1-mini"
            },
            {
              "type": "string",
              "const": "gpt-4.1-nano"
            }
          ],
          "description": "The model to use for the AI's vision capabilities. Allowed values are `gpt-4o-mini`, `gpt-4.1-mini`, and `gpt-4.1-nano`."
        },
        "wait_for_user": {
          "type": "boolean",
          "description": "When false, AI agent will initialize dialogue after call is setup. When true, agent will wait for the user to speak first."
        }
      },
      "title": "params object",
      "unevaluatedProperties": false
    },
    "AIPostPrompt": {
      "anyOf": [
        {
          "$ref": "#/$defs/AIPromptText"
        },
        {
          "$ref": "#/$defs/AIPromptPom"
        }
      ],
      "title": "post_prompt"
    },
    "Pronounce": {
      "type": "object",
      "properties": {
        "replace": {
          "type": "string",
          "description": "The expression to replace."
        },
        "with": {
          "type": "string",
          "description": "The phonetic spelling of the expression."
        },
        "ignore_case": {
          "type": "boolean",
          "description": "Whether the pronunciation replacement should ignore case."
        }
      },
      "required": [
        "replace",
        "with"
      ],
      "title": "Pronounce object",
      "unevaluatedProperties": false
    },
    "AIPrompt": {
      "oneOf": [
        {
          "$ref": "#/$defs/AIPromptContexts"
        },
        {
          "$ref": "#/$defs/AIPromptText"
        },
        {
          "$ref": "#/$defs/AIPromptPom"
        }
      ]
    },
    "SWAIG": {
      "type": "object",
      "properties": {
        "defaults": {
          "$ref": "#/$defs/SWAIGDefaults",
          "description": "Default settings for all SWAIG functions. If `defaults` is not set, settings may be set in each function object. Default is not set."
        },
        "native_functions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWAIGNativeFunction"
          },
          "description": "Prebuilt functions the AI agent is able to call from this list of available native functions"
        },
        "includes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWAIGIncludes"
          },
          "description": "An array of objects to include remote function signatures.\nThe object fields are url to specify where the remote functions are defined and functions which is an array of the function names as strings."
        },
        "functions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWAIGFunction"
          },
          "description": "An array of JSON objects to define functions that can be executed during the interaction with the AI. Default is not set.\nThe fields of this object are the six following."
        },
        "internal_fillers": {
          "$ref": "#/$defs/SWAIGInternalFiller",
          "description": "These are the internal fillers that can be executed during the interaction with the AI while utilizing internal functions."
        }
      },
      "title": "swaig",
      "unevaluatedProperties": false
    },
    "CondParams": {
      "oneOf": [
        {
          "$ref": "#/$defs/CondReg"
        },
        {
          "$ref": "#/$defs/CondElse"
        }
      ],
      "title": "CondParams union"
    },
    "ConnectDeviceSingle": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "description": "The caller ID to use when dialing the number."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConnectHeaders"
          },
          "description": "Custom SIP headers to add to INVITE. It Has no effect on calls to phone numbers."
        },
        "codecs": {
          "type": "string",
          "description": "Comma-separated string of codecs to offer.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "webrtc_media": {
          "type": "boolean",
          "description": "If true, WebRTC media is offered to the SIP endpoint.\nIt has no effect on calls to phone numbers.\nDefault is `false`."
        },
        "session_timeout": {
          "type": "integer",
          "minimum": 1,
          "description": "Time, in seconds, to set the SIP `Session-Expires` header in INVITE.\nMust be a positive, non-zero number.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "ringback": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of URIs to play as ringback tone."
        },
        "result": {
          "anyOf": [
            {
              "$ref": "#/$defs/ConnectSwitch"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CondParams"
              },
              "description": "Execute a sequence of instructions depending on the value of a JavaScript condition.",
              "title": "cond"
            }
          ],
          "description": "`switch` on `return_value` when object `{}` or `cond` when array `[]`"
        },
        "timeout": {
          "type": "integer",
          "description": "Time, in seconds, to wait for the call to be answered.\nDefault is 60 seconds."
        },
        "max_duration": {
          "type": "integer",
          "description": "Maximum duration, in seconds, allowed for the call.\nDefault is `14400` seconds."
        },
        "answer_on_bridge": {
          "type": "boolean",
          "description": "Delay answer until the B-leg answers.\nDefault is `false`."
        },
        "call_state_url": {
          "type": "string",
          "description": "Webhook URL to send call state change notifications to for all legs. It can be overwritten on each destination."
        },
        "call_state_events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of call state event names to be notified about.\nAllowed event names are:\n    - `created`\n    - `ringing`\n    - `answered`\n    - `ended`"
        },
        "confirm": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ValidConfirmMethods"
              }
            }
          ],
          "description": "Confirmation object or string."
        },
        "confirm_timeout": {
          "type": "integer",
          "description": "The amount of time, in seconds, to wait for the `confirm` URL to return a response"
        },
        "username": {
          "type": "string",
          "description": "Username for authentication."
        },
        "password": {
          "type": "string",
          "description": "Password for authentication."
        },
        "encryption": {
          "anyOf": [
            {
              "type": "string",
              "const": "mandatory"
            },
            {
              "type": "string",
              "const": "optional"
            },
            {
              "type": "string",
              "const": "forbidden"
            }
          ],
          "description": "Encryption setting to use. **Possible values:** `mandatory`, `optional`, `forbidden`"
        },
        "status_url": {
          "type": "string",
          "format": "uri",
          "description": "http or https URL to deliver connect status events"
        },
        "to": {
          "type": "string",
          "description": "The SIP URI or phone number to dial."
        }
      },
      "required": [
        "to"
      ],
      "title": "ConnectDeviceSingle object",
      "unevaluatedProperties": false
    },
    "ConnectDeviceSerial": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "description": "The caller ID to use when dialing the number."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConnectHeaders"
          },
          "description": "Custom SIP headers to add to INVITE. It Has no effect on calls to phone numbers."
        },
        "codecs": {
          "type": "string",
          "description": "Comma-separated string of codecs to offer.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "webrtc_media": {
          "type": "boolean",
          "description": "If true, WebRTC media is offered to the SIP endpoint.\nIt has no effect on calls to phone numbers.\nDefault is `false`."
        },
        "session_timeout": {
          "type": "integer",
          "minimum": 1,
          "description": "Time, in seconds, to set the SIP `Session-Expires` header in INVITE.\nMust be a positive, non-zero number.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "ringback": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of URIs to play as ringback tone."
        },
        "result": {
          "anyOf": [
            {
              "$ref": "#/$defs/ConnectSwitch"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CondParams"
              },
              "description": "Execute a sequence of instructions depending on the value of a JavaScript condition.",
              "title": "cond"
            }
          ],
          "description": "`switch` on `return_value` when object `{}` or `cond` when array `[]`"
        },
        "timeout": {
          "type": "integer",
          "description": "Time, in seconds, to wait for the call to be answered.\nDefault is 60 seconds."
        },
        "max_duration": {
          "type": "integer",
          "description": "Maximum duration, in seconds, allowed for the call.\nDefault is `14400` seconds."
        },
        "answer_on_bridge": {
          "type": "boolean",
          "description": "Delay answer until the B-leg answers.\nDefault is `false`."
        },
        "call_state_url": {
          "type": "string",
          "description": "Webhook URL to send call state change notifications to for all legs. It can be overwritten on each destination."
        },
        "call_state_events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of call state event names to be notified about.\nAllowed event names are:\n    - `created`\n    - `ringing`\n    - `answered`\n    - `ended`"
        },
        "confirm": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ValidConfirmMethods"
              }
            }
          ],
          "description": "Confirmation object or string."
        },
        "confirm_timeout": {
          "type": "integer",
          "description": "The amount of time, in seconds, to wait for the `confirm` URL to return a response"
        },
        "username": {
          "type": "string",
          "description": "Username for authentication."
        },
        "password": {
          "type": "string",
          "description": "Password for authentication."
        },
        "encryption": {
          "anyOf": [
            {
              "type": "string",
              "const": "mandatory"
            },
            {
              "type": "string",
              "const": "optional"
            },
            {
              "type": "string",
              "const": "forbidden"
            }
          ],
          "description": "Encryption setting to use. **Possible values:** `mandatory`, `optional`, `forbidden`"
        },
        "status_url": {
          "type": "string",
          "format": "uri",
          "description": "http or https URL to deliver connect status events"
        },
        "serial": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConnectDeviceSingle"
          }
        }
      },
      "required": [
        "serial"
      ],
      "title": "ConnectDeviceSerial object",
      "unevaluatedProperties": false
    },
    "ConnectDeviceParallel": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "description": "The caller ID to use when dialing the number."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConnectHeaders"
          },
          "description": "Custom SIP headers to add to INVITE. It Has no effect on calls to phone numbers."
        },
        "codecs": {
          "type": "string",
          "description": "Comma-separated string of codecs to offer.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "webrtc_media": {
          "type": "boolean",
          "description": "If true, WebRTC media is offered to the SIP endpoint.\nIt has no effect on calls to phone numbers.\nDefault is `false`."
        },
        "session_timeout": {
          "type": "integer",
          "minimum": 1,
          "description": "Time, in seconds, to set the SIP `Session-Expires` header in INVITE.\nMust be a positive, non-zero number.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "ringback": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of URIs to play as ringback tone."
        },
        "result": {
          "anyOf": [
            {
              "$ref": "#/$defs/ConnectSwitch"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CondParams"
              },
              "description": "Execute a sequence of instructions depending on the value of a JavaScript condition.",
              "title": "cond"
            }
          ],
          "description": "`switch` on `return_value` when object `{}` or `cond` when array `[]`"
        },
        "timeout": {
          "type": "integer",
          "description": "Time, in seconds, to wait for the call to be answered.\nDefault is 60 seconds."
        },
        "max_duration": {
          "type": "integer",
          "description": "Maximum duration, in seconds, allowed for the call.\nDefault is `14400` seconds."
        },
        "answer_on_bridge": {
          "type": "boolean",
          "description": "Delay answer until the B-leg answers.\nDefault is `false`."
        },
        "call_state_url": {
          "type": "string",
          "description": "Webhook URL to send call state change notifications to for all legs. It can be overwritten on each destination."
        },
        "call_state_events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of call state event names to be notified about.\nAllowed event names are:\n    - `created`\n    - `ringing`\n    - `answered`\n    - `ended`"
        },
        "confirm": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ValidConfirmMethods"
              }
            }
          ],
          "description": "Confirmation object or string."
        },
        "confirm_timeout": {
          "type": "integer",
          "description": "The amount of time, in seconds, to wait for the `confirm` URL to return a response"
        },
        "username": {
          "type": "string",
          "description": "Username for authentication."
        },
        "password": {
          "type": "string",
          "description": "Password for authentication."
        },
        "encryption": {
          "anyOf": [
            {
              "type": "string",
              "const": "mandatory"
            },
            {
              "type": "string",
              "const": "optional"
            },
            {
              "type": "string",
              "const": "forbidden"
            }
          ],
          "description": "Encryption setting to use. **Possible values:** `mandatory`, `optional`, `forbidden`"
        },
        "status_url": {
          "type": "string",
          "format": "uri",
          "description": "http or https URL to deliver connect status events"
        },
        "parallel": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConnectDeviceSingle"
          },
          "description": "Array of destinations to dial simultaneously."
        }
      },
      "required": [
        "parallel"
      ],
      "title": "ConnectDeviceParallel object",
      "unevaluatedProperties": false
    },
    "ConnectDeviceSerialParallel": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "description": "The caller ID to use when dialing the number."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConnectHeaders"
          },
          "description": "Custom SIP headers to add to INVITE. It Has no effect on calls to phone numbers."
        },
        "codecs": {
          "type": "string",
          "description": "Comma-separated string of codecs to offer.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "webrtc_media": {
          "type": "boolean",
          "description": "If true, WebRTC media is offered to the SIP endpoint.\nIt has no effect on calls to phone numbers.\nDefault is `false`."
        },
        "session_timeout": {
          "type": "integer",
          "minimum": 1,
          "description": "Time, in seconds, to set the SIP `Session-Expires` header in INVITE.\nMust be a positive, non-zero number.\nIt has no effect on calls to phone numbers.\nBased on SignalWire settings."
        },
        "ringback": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of URIs to play as ringback tone."
        },
        "result": {
          "anyOf": [
            {
              "$ref": "#/$defs/ConnectSwitch"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CondParams"
              },
              "description": "Execute a sequence of instructions depending on the value of a JavaScript condition.",
              "title": "cond"
            }
          ],
          "description": "`switch` on `return_value` when object `{}` or `cond` when array `[]`"
        },
        "timeout": {
          "type": "integer",
          "description": "Time, in seconds, to wait for the call to be answered.\nDefault is 60 seconds."
        },
        "max_duration": {
          "type": "integer",
          "description": "Maximum duration, in seconds, allowed for the call.\nDefault is `14400` seconds."
        },
        "answer_on_bridge": {
          "type": "boolean",
          "description": "Delay answer until the B-leg answers.\nDefault is `false`."
        },
        "call_state_url": {
          "type": "string",
          "description": "Webhook URL to send call state change notifications to for all legs. It can be overwritten on each destination."
        },
        "call_state_events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of call state event names to be notified about.\nAllowed event names are:\n    - `created`\n    - `ringing`\n    - `answered`\n    - `ended`"
        },
        "confirm": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ValidConfirmMethods"
              }
            }
          ],
          "description": "Confirmation object or string."
        },
        "confirm_timeout": {
          "type": "integer",
          "description": "The amount of time, in seconds, to wait for the `confirm` URL to return a response"
        },
        "username": {
          "type": "string",
          "description": "Username for authentication."
        },
        "password": {
          "type": "string",
          "description": "Password for authentication."
        },
        "encryption": {
          "anyOf": [
            {
              "type": "string",
              "const": "mandatory"
            },
            {
              "type": "string",
              "const": "optional"
            },
            {
              "type": "string",
              "const": "forbidden"
            }
          ],
          "description": "Encryption setting to use. **Possible values:** `mandatory`, `optional`, `forbidden`"
        },
        "status_url": {
          "type": "string",
          "format": "uri",
          "description": "http or https URL to deliver connect status events"
        },
        "serial_parallel": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/ConnectDeviceSingle"
            }
          },
          "description": "Array of arrays.\nInner arrays contain destinations to dial simultaneously.\nOuter array attempts each parallel group in order."
        }
      },
      "required": [
        "serial_parallel"
      ],
      "title": "ConnectDeviceSerialParallel object",
      "unevaluatedProperties": false
    },
    "ExecuteSwitch": {
      "type": "object",
      "properties": {
        "variable": {
          "type": "string",
          "description": "Name of the variable whose value needs to be compared. If not provided, it will check the `return_value` variable.\nCan be one of the listed set of variables, or a string to represent a custom variable."
        },
        "case": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/SWMLMethod"
            }
          },
          "description": "Object of values mapped to array of instructions to execute"
        },
        "default": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "Array of instructions to execute if no cases match"
        }
      },
      "required": [
        "case"
      ],
      "title": "ExecuteSwitch object",
      "unevaluatedProperties": false
    },
    "TranscribeAction": {
      "oneOf": [
        {
          "$ref": "#/$defs/TranscribeStartAction"
        },
        {
          "type": "string",
          "const": "stop",
          "description": "Stops live transcription of the call."
        },
        {
          "$ref": "#/$defs/TranscribeSummarizeActionUnion"
        }
      ],
      "title": "TranscribeAction union"
    },
    "TranslateAction": {
      "oneOf": [
        {
          "$ref": "#/$defs/StartAction"
        },
        {
          "type": "string",
          "const": "stop",
          "description": "Stops live translation of the call."
        },
        {
          "$ref": "#/$defs/SummarizeActionUnion"
        },
        {
          "$ref": "#/$defs/InjectAction"
        }
      ],
      "title": "TranslateAction union"
    },
    "PlayWithURL": {
      "type": "object",
      "properties": {
        "auto_answer": {
          "type": "boolean",
          "description": "If `true`, the call will automatically answer as the sound is playing. If `false`, you will start playing the audio during early media"
        },
        "volume": {
          "type": "number",
          "minimum": -40,
          "maximum": 40,
          "description": "Volume level for the audio file.\nDefault is `0`.\nValid range is -40 to 40"
        },
        "say_voice": {
          "type": "string",
          "description": "The voice to use for the text to speech.\nDefault is `Polly.Salli`"
        },
        "say_language": {
          "type": "string",
          "description": "The language to use for the text to speech.\nDefault is `en-US`"
        },
        "say_gender": {
          "type": "string",
          "description": "Gender to use for the text to speech.\nDefault is `female`."
        },
        "status_url": {
          "type": "string",
          "format": "uri",
          "description": "http or https URL to deliver play status events"
        },
        "url": {
          "$ref": "#/$defs/play_url",
          "description": "URL to play.\nRequired if `urls` is not present.\nAllowed URLs are:\n    - http:// or https:// - audio file to GET\n    - ring:[duration:]<country code> - ring tone to play. For example: ring:us to play single ring or ring:20.0:us to play ring for 20 seconds.\n    - say:<text to speak> - Sentence to say\n    - silence: <duration> - seconds of silence to play"
        }
      },
      "required": [
        "url"
      ],
      "description": "Play with a single URL",
      "title": "PlayWithURL object",
      "unevaluatedProperties": false
    },
    "PlayWithURLS": {
      "type": "object",
      "properties": {
        "auto_answer": {
          "type": "boolean",
          "description": "If `true`, the call will automatically answer as the sound is playing. If `false`, you will start playing the audio during early media"
        },
        "volume": {
          "type": "number",
          "minimum": -40,
          "maximum": 40,
          "description": "Volume level for the audio file.\nDefault is `0`.\nValid range is -40 to 40"
        },
        "say_voice": {
          "type": "string",
          "description": "The voice to use for the text to speech.\nDefault is `Polly.Salli`"
        },
        "say_language": {
          "type": "string",
          "description": "The language to use for the text to speech.\nDefault is `en-US`"
        },
        "say_gender": {
          "type": "string",
          "description": "Gender to use for the text to speech.\nDefault is `female`."
        },
        "status_url": {
          "type": "string",
          "format": "uri",
          "description": "http or https URL to deliver play status events"
        },
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/play_url"
          },
          "description": "Array of URLs to play.\nRequired if `url` is not present.\nAllowed URLs are:\n    - http:// or https:// - audio file to GET\n    - ring:[duration:]<country code> - ring tone to play. For example: ring:us to play single ring or ring:20.0:us to play ring for 20 seconds.\n    - say:<text to speak> - Sentence to say\n    - silence: <duration> - seconds of silence to play"
        }
      },
      "required": [
        "urls"
      ],
      "title": "PlayWithURLS object",
      "unevaluatedProperties": false
    },
    "play_url": {
      "type": "string",
      "pattern": "^(http://.*|https://.*|ring: ?[0-9.]*: ?[a-zA-Z]{2}|say: ?.*|silence: ?[0-9.]*|ring: ?[a-zA-Z]{2})$"
    },
    "SMSWithBody": {
      "type": "object",
      "properties": {
        "to_number": {
          "type": "string",
          "description": "The phone number to send the SMS to."
        },
        "from_number": {
          "type": "string",
          "description": "The phone number to send the SMS from.\nDefault is the calling party's caller ID number."
        },
        "region": {
          "type": "string",
          "description": "The region to use for the SMS."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of tags to associate with the message to facilitate log searches."
        },
        "body": {
          "type": "string",
          "description": "Required if `media` is not present. The body of the SMS message."
        }
      },
      "required": [
        "to_number",
        "from_number",
        "body"
      ],
      "title": "SMSWithBody object",
      "unevaluatedProperties": false
    },
    "SMSWithMedia": {
      "type": "object",
      "properties": {
        "to_number": {
          "type": "string",
          "description": "The phone number to send the SMS to."
        },
        "from_number": {
          "type": "string",
          "description": "The phone number to send the SMS from.\nDefault is the calling party's caller ID number."
        },
        "region": {
          "type": "string",
          "description": "The region to use for the SMS."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of tags to associate with the message to facilitate log searches."
        },
        "media": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required if `body` is not present. Array of media URLs to include in the message."
        },
        "body": {
          "type": "string",
          "description": "Optional if `media` is present. The body of the SMS message."
        }
      },
      "required": [
        "to_number",
        "from_number",
        "media"
      ],
      "title": "SMSWithMedia object",
      "unevaluatedProperties": false
    },
    "PayParameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifier for your custom parameter. This will be the key in the parameters object."
        },
        "value": {
          "type": "string",
          "description": "The value associated with the parameter. This will be the value in the parameters object."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "PayPrompts": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/PayPromptAction"
          },
          "description": "Array of action objects to execute for this prompt. These actions can either play an audio file or speak a phrase."
        },
        "for": {
          "type": "string",
          "description": "The payment step this prompt is for. See Payment Steps for a list of available steps.\n\n- `payment-card-number`: Collect the payment card number.\n- `expiration-date`: Collect the payment card expiration date.\n- `security-code`: Collect the payment card security code.\n- `postal-code`: Collect the payment card postal code.\n- `payment-processing`: The step used during the payment processing.\n- `payment-completed`: The step used when the payment is completed.\n- `payment-failed`: The step used when the payment fails.\n- `payment-cancelled`: The step used when the payment is cancelled."
        },
        "attempts": {
          "type": "string",
          "description": "Specifies which payment attempt(s) this prompt applies to. The value increments when a payment fails.\n Use a single number (e.g., \"1\") or space-separated numbers (e.g., \"2 3\") to target the specific attempts."
        },
        "card_type": {
          "type": "string",
          "description": "Space-seperated list of card types that are allowed to be used for this prompt.\n\nSupported card types:\n    - `visa`\n    - `mastercard`\n    - `amex`\n    - `maestro`\n    - `discover`\n    - `optima`\n    - `jcb`\n    - `diners-club`"
        },
        "error_type": {
          "type": "string",
          "description": "Space-separated list of error types this prompt applies to\n\nAvailable error types:\n    - `timeout` - User input timeout\n    - `invalid-card-number` - Failed card validation\n    - `invalid-card-type` - Unsupported card type\n    - `invalid-date` - Invalid expiration date\n    - `invalid-security-code` - Invalid CVV format\n    - `invalid-postal-code` - Invalid postal code format\n    - `session-in-progress` - Concurrent session attempt\n    - `card-declined` - Payment declined\n"
        }
      },
      "required": [
        "actions",
        "for"
      ],
      "unevaluatedProperties": false
    },
    "LanguagesWithSoloFillers": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Any arbirary name for the language object."
        },
        "code": {
          "type": "string",
          "description": "The language code for the ai to hear. For example, 'fr-FR'."
        },
        "voice": {
          "type": "string",
          "description": "Voice to use for the language. For example, 'fr-FR-Neural2-B'."
        },
        "_model": {
          "type": "string",
          "description": "The model to use for the specified TTS engine. For example, 'arcana'."
        },
        "emotion": {
          "type": "string",
          "const": "auto",
          "description": "Enables emotion detection for the set TTS engine. This allows the AI to express emotions when speaking.\nA global emotion or specific emotions for certain topics can be set within the prompt of the AI.\nIMPORTANT: Only works with [`Cartesia`](/voice/getting-started/voice-and-languages#cartesia) TTS engine."
        },
        "speed": {
          "type": "string",
          "const": "auto",
          "description": "The speed to use for the specified TTS engine. This allows the AI to speak at a different speed at different points in the conversation.\nThe speed behavior can be defined in the prompt of the AI.\nIMPORTANT: Only works with [`Cartesia`](/voice/getting-started/voice-and-languages#cartesia) TTS engine."
        },
        "engine": {
          "type": "string",
          "description": "The engine to use for the language. For example, 'elevenlabs'.",
          "deprecated": true
        },
        "fillers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings to be used as fillers in the conversation. This will be used for both speech and function fillers if provided.",
          "deprecated": true
        }
      },
      "required": [
        "name",
        "code",
        "voice"
      ],
      "title": "LanguagesWithSoloFillers",
      "unevaluatedProperties": false
    },
    "LanguagesWithFillers": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Any arbirary name for the language object."
        },
        "code": {
          "type": "string",
          "description": "The language code for the ai to hear. For example, 'fr-FR'."
        },
        "voice": {
          "type": "string",
          "description": "Voice to use for the language. For example, 'fr-FR-Neural2-B'."
        },
        "_model": {
          "type": "string",
          "description": "The model to use for the specified TTS engine. For example, 'arcana'."
        },
        "emotion": {
          "type": "string",
          "const": "auto",
          "description": "Enables emotion detection for the set TTS engine. This allows the AI to express emotions when speaking.\nA global emotion or specific emotions for certain topics can be set within the prompt of the AI.\nIMPORTANT: Only works with [`Cartesia`](/voice/getting-started/voice-and-languages#cartesia) TTS engine."
        },
        "speed": {
          "type": "string",
          "const": "auto",
          "description": "The speed to use for the specified TTS engine. This allows the AI to speak at a different speed at different points in the conversation.\nThe speed behavior can be defined in the prompt of the AI.\nIMPORTANT: Only works with [`Cartesia`](/voice/getting-started/voice-and-languages#cartesia) TTS engine."
        },
        "engine": {
          "type": "string",
          "description": "The engine to use for the language. For example, 'elevenlabs'.",
          "deprecated": true
        },
        "function_fillers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings to be used as fillers in the conversation when calling a `swaig function`. This helps the AI break silence between responses. The filler is played asynchronously during the function call."
        },
        "speech_fillers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings to be used as fillers in the conversation. This helps the AI break silence between responses."
        }
      },
      "required": [
        "name",
        "code",
        "voice"
      ],
      "title": "LanguagesWithFillers",
      "unevaluatedProperties": false
    },
    "AttentionTimeout": {
      "type": "integer",
      "minimum": 10000,
      "maximum": 600000
    },
    "Direction": {
      "type": "string",
      "enum": [
        "inbound",
        "outbound"
      ],
      "title": "Direction enum"
    },
    "AIPromptText": {
      "type": "object",
      "properties": {
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 1.5,
          "description": "Randomness setting. Float value between 0.0 and 1.5. Closer to 0 will make the output less random."
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Randomness setting. Alternative to `temperature`. Float value between 0.0 and 1.0. Closer to 0 will make the output less random."
        },
        "confidence": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Threshold to fire a speech-detect event at the end of the utterance. Float value between 0.0 and 1.0. \nDecreasing this value will reduce the pause after the user speaks, but may introduce false positives."
        },
        "presence_penalty": {
          "type": "number",
          "minimum": -2,
          "maximum": 2,
          "description": "Aversion to staying on topic. Float value between -2.0 and 2.0. Positive values increase the model's likelihood to talk about new topics."
        },
        "frequency_penalty": {
          "type": "number",
          "minimum": -2,
          "maximum": 2,
          "description": "Aversion to repeating lines. Float value between -2.0 and 2.0. Positive values decrease the model's likelihood to repeat the same line verbatim."
        },
        "text": {
          "type": "string",
          "description": "The instructions to send to the agent."
        }
      },
      "required": [
        "text"
      ],
      "title": "AIPromptBase",
      "unevaluatedProperties": false
    },
    "AIPromptPom": {
      "type": "object",
      "properties": {
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 1.5,
          "description": "Randomness setting. Float value between 0.0 and 1.5. Closer to 0 will make the output less random."
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Randomness setting. Alternative to `temperature`. Float value between 0.0 and 1.0. Closer to 0 will make the output less random."
        },
        "confidence": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Threshold to fire a speech-detect event at the end of the utterance. Float value between 0.0 and 1.0. \nDecreasing this value will reduce the pause after the user speaks, but may introduce false positives."
        },
        "presence_penalty": {
          "type": "number",
          "minimum": -2,
          "maximum": 2,
          "description": "Aversion to staying on topic. Float value between -2.0 and 2.0. Positive values increase the model's likelihood to talk about new topics."
        },
        "frequency_penalty": {
          "type": "number",
          "minimum": -2,
          "maximum": 2,
          "description": "Aversion to repeating lines. Float value between -2.0 and 2.0. Positive values decrease the model's likelihood to repeat the same line verbatim."
        },
        "pom": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/POM"
          },
          "minItems": 1,
          "description": "Prompt Object Model (POM) is a structured data format for composing, organizing, and rendering prompt instructions for AI agents.\nPOM ensures that the prompt is structured in a way that is best for the AI agent to understand and execute.\nThe first item in the array MUST be FirstPOMSection (with optional title).\nAll subsequent items MUST be PomSection (with required title and body)."
        }
      },
      "required": [
        "pom"
      ],
      "title": "AIPromptBase",
      "unevaluatedProperties": false
    },
    "AIPromptContexts": {
      "type": "object",
      "properties": {
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 1.5,
          "description": "Randomness setting. Float value between 0.0 and 1.5. Closer to 0 will make the output less random."
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Randomness setting. Alternative to `temperature`. Float value between 0.0 and 1.0. Closer to 0 will make the output less random."
        },
        "confidence": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Threshold to fire a speech-detect event at the end of the utterance. Float value between 0.0 and 1.0. \nDecreasing this value will reduce the pause after the user speaks, but may introduce false positives."
        },
        "presence_penalty": {
          "type": "number",
          "minimum": -2,
          "maximum": 2,
          "description": "Aversion to staying on topic. Float value between -2.0 and 2.0. Positive values increase the model's likelihood to talk about new topics."
        },
        "frequency_penalty": {
          "type": "number",
          "minimum": -2,
          "maximum": 2,
          "description": "Aversion to repeating lines. Float value between -2.0 and 2.0. Positive values decrease the model's likelihood to repeat the same line verbatim."
        },
        "contexts": {
          "$ref": "#/$defs/Contexts",
          "description": "An object that defines the context steps for the AI. The context steps are used to define the flow of the conversation.\nEvery context object requires a `default` key, which is the default context to use at the beginning of the conversation.\nAdditionally, more context steps can be defined as any other key in the object."
        },
        "text": {
          "type": "string",
          "description": "The instructions to send to the agent."
        }
      },
      "required": [
        "contexts"
      ],
      "title": "prompt contexts",
      "unevaluatedProperties": false
    },
    "SWAIGDefaults": {
      "type": "object",
      "properties": {
        "web_hook_url": {
          "type": "string",
          "description": "Default URL to send status callbacks and reports to. Authentication can also be set in the url in the format of `username:password@url.`"
        }
      },
      "title": "defaults",
      "unevaluatedProperties": false
    },
    "SWAIGNativeFunction": {
      "type": "string",
      "enum": [
        "check_time",
        "wait_seconds"
      ],
      "title": "native_functions"
    },
    "SWAIGIncludes": {
      "type": "object",
      "properties": {
        "functions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Remote functions to fetch and include in your AI application."
        },
        "url": {
          "type": "string",
          "description": "URL to fetch remote functions and include in your AI application. Authentication can also be set in the url in the format of `username:password@url`."
        },
        "meta_data": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": ""
        }
      },
      "required": [
        "functions",
        "url"
      ],
      "title": "includes",
      "unevaluatedProperties": false
    },
    "SWAIGFunction": {
      "anyOf": [
        {
          "$ref": "#/$defs/UserSWAIGFunction"
        },
        {
          "$ref": "#/$defs/StartUpHookSWAIGFunction"
        },
        {
          "$ref": "#/$defs/HangUpHookSWAIGFunction"
        },
        {
          "$ref": "#/$defs/SummarizeConversationSWAIGFunction"
        }
      ]
    },
    "SWAIGInternalFiller": {
      "type": "object",
      "properties": {
        "get_visual_input": {
          "$ref": "#/$defs/FunctionFillers",
          "description": "This function is used to visually process input that the AI Agent has captured."
        }
      },
      "unevaluatedProperties": false
    },
    "CondReg": {
      "type": "object",
      "properties": {
        "when": {
          "type": "string",
          "description": "The condition to be evaluated and act on."
        },
        "then": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "The list of SWML instructions to be executed if the condition is `true`"
        },
        "else": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "The list of SWML instructions to be executed if the condition is `false`."
        }
      },
      "required": [
        "when",
        "then"
      ],
      "title": "CondReg object",
      "unevaluatedProperties": false
    },
    "CondElse": {
      "type": "object",
      "properties": {
        "else": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "The list of SWML instructions to be executed if the condition is `false`."
        }
      },
      "required": [
        "else"
      ],
      "title": "CondElse object",
      "unevaluatedProperties": false
    },
    "ConnectHeaders": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the header."
        },
        "value": {
          "type": "string",
          "description": "The value of the header."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "title": "ConnectHeaders object",
      "unevaluatedProperties": false
    },
    "ConnectSwitch": {
      "type": "object",
      "properties": {
        "variable": {
          "type": "string",
          "description": "Name of the variable whose value needs to be compared. If not provided, it will check the `connect_result` variable."
        },
        "case": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/SWMLMethod"
            }
          },
          "description": "Object of values mapped to array of instructions to execute"
        },
        "default": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SWMLMethod"
          },
          "description": "Array of instructions to execute if no cases match"
        }
      },
      "required": [
        "case"
      ],
      "title": "ConnectSwitch object",
      "unevaluatedProperties": false
    },
    "ValidConfirmMethods": {
      "anyOf": [
        {
          "$ref": "#/$defs/Cond"
        },
        {
          "$ref": "#/$defs/Set"
        },
        {
          "$ref": "#/$defs/Unset"
        },
        {
          "$ref": "#/$defs/Hangup"
        },
        {
          "$ref": "#/$defs/Play"
        },
        {
          "$ref": "#/$defs/Prompt"
        },
        {
          "$ref": "#/$defs/Record"
        },
        {
          "$ref": "#/$defs/RecordCall"
        },
        {
          "$ref": "#/$defs/StopRecordCall"
        },
        {
          "$ref": "#/$defs/Tap"
        },
        {
          "$ref": "#/$defs/StopTap"
        },
        {
          "$ref": "#/$defs/SendDigits"
        },
        {
          "$ref": "#/$defs/SendSMS"
        },
        {
          "$ref": "#/$defs/Denoise"
        },
        {
          "$ref": "#/$defs/StopDenoise"
        }
      ]
    },
    "TranscribeStartAction": {
      "type": "object",
      "properties": {
        "start": {
          "type": "object",
          "properties": {
            "ai_summary": {
              "type": "boolean",
              "description": "Enables AI summarization of the transcription. The summary will be sent to the specified URL at the end of the conversation."
            },
            "webhook": {
              "type": "string",
              "description": "The webhook URL the transcription will be sent to."
            },
            "lang": {
              "type": "string",
              "description": "The language to transcribe."
            },
            "live_events": {
              "type": "boolean",
              "description": "Whether to enable live events."
            },
            "speech_timeout": {
              "type": "integer",
              "description": "The timeout for speech recognition."
            },
            "vad_silence_ms": {
              "type": "integer",
              "description": "Voice activity detection silence time in milliseconds."
            },
            "vad_thresh": {
              "type": "integer",
              "description": "Voice activity detection threshold."
            },
            "debug_level": {
              "type": "integer",
              "description": "Debug level for logging"
            },
            "direction": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/TranscribeDirection"
              },
              "description": "The direction of the call that should be transcribed."
            },
            "speech_engine": {
              "type": "string",
              "description": "The speech engine to be used."
            },
            "summary_prompt": {
              "type": "string",
              "description": "The prompt for summarizaton."
            }
          },
          "required": [
            "lang",
            "direction",
            "speech_engine"
          ],
          "description": "Starts live transcription of the call. The transcription will be sent to the specified URL.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "start"
      ],
      "title": "TranscribeStartAction object",
      "unevaluatedProperties": false
    },
    "TranscribeSummarizeActionUnion": {
      "oneOf": [
        {
          "$ref": "#/$defs/TranscribeSummarizeAction"
        },
        {
          "type": "string",
          "const": "summarize",
          "description": "Summarizes the conversation as a string value."
        }
      ],
      "title": "TranscribeSummarizeAction union"
    },
    "StartAction": {
      "type": "object",
      "properties": {
        "start": {
          "type": "object",
          "properties": {
            "webhook": {
              "type": "string",
              "description": "The webhook URL to be called."
            },
            "from_lang": {
              "type": "string",
              "description": "The language to translate from."
            },
            "to_lang": {
              "type": "string",
              "description": "The language to translate to."
            },
            "from_voice": {
              "type": "string",
              "description": "The TTS voice you want to use for the source language."
            },
            "to_voice": {
              "type": "string",
              "description": "The TTS voice you want to use for the target language."
            },
            "live_events": {
              "type": "boolean",
              "description": "Whether to enable live events."
            },
            "ai_summary": {
              "type": "boolean",
              "description": "Whether to enable AI summarization."
            },
            "speech_timeout": {
              "type": "integer",
              "description": "The timeout for speech recognition."
            },
            "vad_silence_ms": {
              "type": "integer",
              "description": "Voice activity detection silence time in milliseconds."
            },
            "vad_thresh": {
              "type": "integer",
              "description": "Voice activity detection threshold."
            },
            "debug_level": {
              "type": "integer",
              "description": "Debug level for logging"
            },
            "direction": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/TranslateDirection"
              },
              "description": "The direction of the call that should be translated."
            },
            "speech_engine": {
              "type": "string",
              "description": "The speech engine to be used."
            },
            "summary_prompt": {
              "type": "string",
              "description": "The prompt for summarizaton."
            }
          },
          "required": [
            "from_lang",
            "to_lang",
            "direction",
            "speech_engine"
          ],
          "description": "Starts live translation of the call. The translation will be sent to the specified URL.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "start"
      ],
      "title": "StartAction object",
      "unevaluatedProperties": false
    },
    "SummarizeActionUnion": {
      "oneOf": [
        {
          "$ref": "#/$defs/SummarizeAction"
        },
        {
          "type": "string",
          "const": "summarize",
          "description": "Summarizes the conversation as a string value."
        }
      ],
      "title": "SummarizeAction union"
    },
    "InjectAction": {
      "type": "object",
      "properties": {
        "inject": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "The message to be injected"
            },
            "direction": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/TranslateDirection"
              },
              "description": "The direction of the message that should be injected."
            }
          },
          "required": [
            "message",
            "direction"
          ],
          "description": "Injects a message into the conversation.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "inject"
      ],
      "title": "InjectAction object",
      "unevaluatedProperties": false
    },
    "PayPromptAction": {
      "anyOf": [
        {
          "$ref": "#/$defs/PayPromptSayAction"
        },
        {
          "$ref": "#/$defs/PayPromptPlayAction"
        }
      ]
    },
    "POM": {
      "anyOf": [
        {
          "$ref": "#/$defs/PomSectionBodyContent"
        },
        {
          "$ref": "#/$defs/PomSectionBulletsContent"
        }
      ],
      "description": "Regular section that requires either body or bullets."
    },
    "Contexts": {
      "type": "object",
      "properties": {
        "default": {
          "$ref": "#/$defs/ContextSteps",
          "description": "The default context to use at the beginning of the conversation. Additional context steps can be defined as any other key in the object."
        }
      },
      "required": [
        "default"
      ],
      "unevaluatedProperties": {
        "$ref": "#/$defs/ContextSteps"
      },
      "title": "contexts"
    },
    "UserSWAIGFunction": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the context and purpose of the function, to explain to the agent when to use it."
        },
        "purpose": {
          "type": "string",
          "description": "The purpose field has been deprecated and is replaced by the `description` field.\nA description of the context and purpose of the function, to explain to the agent when to use it.",
          "deprecated": true
        },
        "parameters": {
          "$ref": "#/$defs/FunctionParameters",
          "description": "A JSON object that defines the expected user input parameters and their validation rules for the function."
        },
        "fillers": {
          "$ref": "#/$defs/FunctionFillers",
          "description": "A JSON object defining the fillers that should be played when calling a `swaig function`. This helps the AI break silence between responses. The filler is played asynchronously during the function call."
        },
        "argument": {
          "$ref": "#/$defs/FunctionParameters",
          "description": "The argument field has been deprecated and is replaced by the `parameters` field. \nA JSON object defining the input that should be passed to the function. \nThe fields of this object are the following two parameters.",
          "deprecated": true
        },
        "active": {
          "type": "boolean",
          "description": "Whether the function is active. Default is `true`."
        },
        "meta_data": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "A powerful and flexible environmental variable which can accept arbitrary data that is set initially in the SWML script or from the SWML set_meta_data action.\nThis data can be referenced locally to the function.\nAll contained information can be accessed and expanded within the prompt - for example, by using a template string.\nDefault is not set."
        },
        "meta_data_token": {
          "type": "string",
          "description": "Scoping token for meta_data. If not supplied, metadata will be scoped to function's `web_hook_url`. Default is set by SignalWire."
        },
        "data_map": {
          "$ref": "#/$defs/DataMap",
          "minProperties": 1,
          "description": "An object that processes function inputs and executes operations through expressions, webhooks, or direct output.\nProperties are evaluated in strict priority order:\n1. expressions\n2. webhooks\n3. output\n\nEvaluation stops at the first property that returns a valid output result, similar to a return statement in a function.\nAny subsequent properties are ignored when a valid output is returned.\nIf a valid output is not returned from any of the properties, a generic error message is returned."
        },
        "web_hook_url": {
          "type": "string",
          "description": "Function-specific URL to send status callbacks and reports to. Takes precedence over a default setting. Authentication can also be set in the url in the format of `username:password@url.`"
        },
        "wait_file": {
          "type": "string",
          "format": "uri",
          "description": "A file to play while the function is running. `wait_file_loops` can specify the amount of times that files should continously play. Default is not set."
        },
        "wait_file_loops": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "The number of times to loop playing the file. Default is not set."
        },
        "wait_for_fillers": {
          "type": "boolean",
          "description": "Wait for fillers to finish before continuing. Default is not set."
        },
        "function": {
          "type": "string",
          "description": "The unique name for the function."
        }
      },
      "required": [
        "description",
        "function"
      ],
      "title": "functions",
      "unevaluatedProperties": false
    },
    "StartUpHookSWAIGFunction": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the context and purpose of the function, to explain to the agent when to use it."
        },
        "purpose": {
          "type": "string",
          "description": "The purpose field has been deprecated and is replaced by the `description` field.\nA description of the context and purpose of the function, to explain to the agent when to use it.",
          "deprecated": true
        },
        "parameters": {
          "$ref": "#/$defs/FunctionParameters",
          "description": "A JSON object that defines the expected user input parameters and their validation rules for the function."
        },
        "fillers": {
          "$ref": "#/$defs/FunctionFillers",
          "description": "A JSON object defining the fillers that should be played when calling a `swaig function`. This helps the AI break silence between responses. The filler is played asynchronously during the function call."
        },
        "argument": {
          "$ref": "#/$defs/FunctionParameters",
          "description": "The argument field has been deprecated and is replaced by the `parameters` field. \nA JSON object defining the input that should be passed to the function. \nThe fields of this object are the following two parameters.",
          "deprecated": true
        },
        "active": {
          "type": "boolean",
          "description": "Whether the function is active. Default is `true`."
        },
        "meta_data": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "A powerful and flexible environmental variable which can accept arbitrary data that is set initially in the SWML script or from the SWML set_meta_data action.\nThis data can be referenced locally to the function.\nAll contained information can be accessed and expanded within the prompt - for example, by using a template string.\nDefault is not set."
        },
        "meta_data_token": {
          "type": "string",
          "description": "Scoping token for meta_data. If not supplied, metadata will be scoped to function's `web_hook_url`. Default is set by SignalWire."
        },
        "data_map": {
          "$ref": "#/$defs/DataMap",
          "minProperties": 1,
          "description": "An object that processes function inputs and executes operations through expressions, webhooks, or direct output.\nProperties are evaluated in strict priority order:\n1. expressions\n2. webhooks\n3. output\n\nEvaluation stops at the first property that returns a valid output result, similar to a return statement in a function.\nAny subsequent properties are ignored when a valid output is returned.\nIf a valid output is not returned from any of the properties, a generic error message is returned."
        },
        "web_hook_url": {
          "type": "string",
          "description": "Function-specific URL to send status callbacks and reports to. Takes precedence over a default setting. Authentication can also be set in the url in the format of `username:password@url.`"
        },
        "wait_file": {
          "type": "string",
          "format": "uri",
          "description": "A file to play while the function is running. `wait_file_loops` can specify the amount of times that files should continously play. Default is not set."
        },
        "wait_file_loops": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "The number of times to loop playing the file. Default is not set."
        },
        "wait_for_fillers": {
          "type": "boolean",
          "description": "Wait for fillers to finish before continuing. Default is not set."
        },
        "function": {
          "type": "string",
          "const": "startup_hook",
          "description": "The unique name for the function. For the start_hook function, the function name is 'start_hook'."
        }
      },
      "required": [
        "description",
        "function"
      ],
      "title": "functions",
      "unevaluatedProperties": false
    },
    "HangUpHookSWAIGFunction": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the context and purpose of the function, to explain to the agent when to use it."
        },
        "purpose": {
          "type": "string",
          "description": "The purpose field has been deprecated and is replaced by the `description` field.\nA description of the context and purpose of the function, to explain to the agent when to use it.",
          "deprecated": true
        },
        "parameters": {
          "$ref": "#/$defs/FunctionParameters",
          "description": "A JSON object that defines the expected user input parameters and their validation rules for the function."
        },
        "fillers": {
          "$ref": "#/$defs/FunctionFillers",
          "description": "A JSON object defining the fillers that should be played when calling a `swaig function`. This helps the AI break silence between responses. The filler is played asynchronously during the function call."
        },
        "argument": {
          "$ref": "#/$defs/FunctionParameters",
          "description": "The argument field has been deprecated and is replaced by the `parameters` field. \nA JSON object defining the input that should be passed to the function. \nThe fields of this object are the following two parameters.",
          "deprecated": true
        },
        "active": {
          "type": "boolean",
          "description": "Whether the function is active. Default is `true`."
        },
        "meta_data": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "A powerful and flexible environmental variable which can accept arbitrary data that is set initially in the SWML script or from the SWML set_meta_data action.\nThis data can be referenced locally to the function.\nAll contained information can be accessed and expanded within the prompt - for example, by using a template string.\nDefault is not set."
        },
        "meta_data_token": {
          "type": "string",
          "description": "Scoping token for meta_data. If not supplied, metadata will be scoped to function's `web_hook_url`. Default is set by SignalWire."
        },
        "data_map": {
          "$ref": "#/$defs/DataMap",
          "minProperties": 1,
          "description": "An object that processes function inputs and executes operations through expressions, webhooks, or direct output.\nProperties are evaluated in strict priority order:\n1. expressions\n2. webhooks\n3. output\n\nEvaluation stops at the first property that returns a valid output result, similar to a return statement in a function.\nAny subsequent properties are ignored when a valid output is returned.\nIf a valid output is not returned from any of the properties, a generic error message is returned."
        },
        "web_hook_url": {
          "type": "string",
          "description": "Function-specific URL to send status callbacks and reports to. Takes precedence over a default setting. Authentication can also be set in the url in the format of `username:password@url.`"
        },
        "wait_file": {
          "type": "string",
          "format": "uri",
          "description": "A file to play while the function is running. `wait_file_loops` can specify the amount of times that files should continously play. Default is not set."
        },
        "wait_file_loops": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "The number of times to loop playing the file. Default is not set."
        },
        "wait_for_fillers": {
          "type": "boolean",
          "description": "Wait for fillers to finish before continuing. Default is not set."
        },
        "function": {
          "type": "string",
          "const": "hangup_hook",
          "description": "The unique name for the function. For the stop_hook function, the function name is 'stop_hook'."
        }
      },
      "required": [
        "description",
        "function"
      ],
      "title": "functions",
      "unevaluatedProperties": false
    },
    "SummarizeConversationSWAIGFunction": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the context and purpose of the function, to explain to the agent when to use it."
        },
        "purpose": {
          "type": "string",
          "description": "The purpose field has been deprecated and is replaced by the `description` field.\nA description of the context and purpose of the function, to explain to the agent when to use it.",
          "deprecated": true
        },
        "parameters": {
          "$ref": "#/$defs/FunctionParameters",
          "description": "A JSON object that defines the expected user input parameters and their validation rules for the function."
        },
        "fillers": {
          "$ref": "#/$defs/FunctionFillers",
          "description": "A JSON object defining the fillers that should be played when calling a `swaig function`. This helps the AI break silence between responses. The filler is played asynchronously during the function call."
        },
        "argument": {
          "$ref": "#/$defs/FunctionParameters",
          "description": "The argument field has been deprecated and is replaced by the `parameters` field. \nA JSON object defining the input that should be passed to the function. \nThe fields of this object are the following two parameters.",
          "deprecated": true
        },
        "active": {
          "type": "boolean",
          "description": "Whether the function is active. Default is `true`."
        },
        "meta_data": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "A powerful and flexible environmental variable which can accept arbitrary data that is set initially in the SWML script or from the SWML set_meta_data action.\nThis data can be referenced locally to the function.\nAll contained information can be accessed and expanded within the prompt - for example, by using a template string.\nDefault is not set."
        },
        "meta_data_token": {
          "type": "string",
          "description": "Scoping token for meta_data. If not supplied, metadata will be scoped to function's `web_hook_url`. Default is set by SignalWire."
        },
        "data_map": {
          "$ref": "#/$defs/DataMap",
          "minProperties": 1,
          "description": "An object that processes function inputs and executes operations through expressions, webhooks, or direct output.\nProperties are evaluated in strict priority order:\n1. expressions\n2. webhooks\n3. output\n\nEvaluation stops at the first property that returns a valid output result, similar to a return statement in a function.\nAny subsequent properties are ignored when a valid output is returned.\nIf a valid output is not returned from any of the properties, a generic error message is returned."
        },
        "web_hook_url": {
          "type": "string",
          "description": "Function-specific URL to send status callbacks and reports to. Takes precedence over a default setting. Authentication can also be set in the url in the format of `username:password@url.`"
        },
        "wait_file": {
          "type": "string",
          "format": "uri",
          "description": "A file to play while the function is running. `wait_file_loops` can specify the amount of times that files should continously play. Default is not set."
        },
        "wait_file_loops": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "The number of times to loop playing the file. Default is not set."
        },
        "wait_for_fillers": {
          "type": "boolean",
          "description": "Wait for fillers to finish before continuing. Default is not set."
        },
        "function": {
          "type": "string",
          "const": "summarize_conversation",
          "description": "The unique name for the function.. For the summarize_conversation function, the function name is 'summarize_conversation'."
        }
      },
      "required": [
        "description",
        "function"
      ],
      "description": "An internal reserved function that generates a summary of the conversation and sends any specified properties to the configured webhook after the conversation has ended.\nThis ensures that key parts of the conversation, as interpreted by the LLM, are reliably captured and delivered to the webhook.",
      "title": "functions",
      "unevaluatedProperties": false
    },
    "FunctionFillers": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "default": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Default language set by the user"
            }
          },
          "required": [
            "default"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "bg": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Bulgarian"
            }
          },
          "required": [
            "bg"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "ca": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Catalan"
            }
          },
          "required": [
            "ca"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "zh": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Chinese (Simplified)"
            }
          },
          "required": [
            "zh"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "zh-CN": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Chinese (Simplified, China)"
            }
          },
          "required": [
            "zh-CN"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "zh-Hans": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Chinese (Simplified Han)"
            }
          },
          "required": [
            "zh-Hans"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "zh-TW": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Chinese (Traditional, Taiwan)"
            }
          },
          "required": [
            "zh-TW"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "zh-Hant": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Chinese (Traditional Han)"
            }
          },
          "required": [
            "zh-Hant"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "zh-HK": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Chinese (Traditional, Hong Kong)"
            }
          },
          "required": [
            "zh-HK"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "cs": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Czech"
            }
          },
          "required": [
            "cs"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "da": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Danish"
            }
          },
          "required": [
            "da"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "da-DK": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Danish (Denmark)"
            }
          },
          "required": [
            "da-DK"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "nl": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Dutch"
            }
          },
          "required": [
            "nl"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "en": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "English"
            }
          },
          "required": [
            "en"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "en-US": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "English (United States)"
            }
          },
          "required": [
            "en-US"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "en-GB": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "English (United Kingdom)"
            }
          },
          "required": [
            "en-GB"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "en-NZ": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "English (New Zealand)"
            }
          },
          "required": [
            "en-NZ"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "en-IN": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "English (India)"
            }
          },
          "required": [
            "en-IN"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "en-AU": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "English (Australia)"
            }
          },
          "required": [
            "en-AU"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "et": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Estonian"
            }
          },
          "required": [
            "et"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "fi": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Finnish"
            }
          },
          "required": [
            "fi"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "nl-BE": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Flemish (Belgian Dutch)"
            }
          },
          "required": [
            "nl-BE"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "fr": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "French"
            }
          },
          "required": [
            "fr"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "fr-CA": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "French (Canada)"
            }
          },
          "required": [
            "fr-CA"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "de": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "German"
            }
          },
          "required": [
            "de"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "de-CH": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "German (Switzerland)"
            }
          },
          "required": [
            "de-CH"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "el": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Greek"
            }
          },
          "required": [
            "el"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "hi": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Hindi"
            }
          },
          "required": [
            "hi"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "hu": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Hungarian"
            }
          },
          "required": [
            "hu"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Indonesian"
            }
          },
          "required": [
            "id"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "it": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Italian"
            }
          },
          "required": [
            "it"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "ja": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Japanese"
            }
          },
          "required": [
            "ja"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "ko": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Korean"
            }
          },
          "required": [
            "ko"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "ko-KR": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Korean (South Korea)"
            }
          },
          "required": [
            "ko-KR"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "lv": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Latvian"
            }
          },
          "required": [
            "lv"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "lt": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Lithuanian"
            }
          },
          "required": [
            "lt"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "ms": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Malay"
            }
          },
          "required": [
            "ms"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "multi": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Multilingual (Spanish + English)"
            }
          },
          "required": [
            "multi"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "no": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Norwegian"
            }
          },
          "required": [
            "no"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "pl": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Polish"
            }
          },
          "required": [
            "pl"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "pt": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Portuguese"
            }
          },
          "required": [
            "pt"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "pt-BR": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Portuguese (Brazil)"
            }
          },
          "required": [
            "pt-BR"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "pt-PT": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Portuguese (Portugal)"
            }
          },
          "required": [
            "pt-PT"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "ro": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Romanian"
            }
          },
          "required": [
            "ro"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "ru": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Russian"
            }
          },
          "required": [
            "ru"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "sk": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Slovak"
            }
          },
          "required": [
            "sk"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "es": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Spanish"
            }
          },
          "required": [
            "es"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "es-419": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Spanish (Latin America)"
            }
          },
          "required": [
            "es-419"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "sv": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Swedish"
            }
          },
          "required": [
            "sv"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "sv-SE": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Swedish (Sweden)"
            }
          },
          "required": [
            "sv-SE"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "th": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Thai"
            }
          },
          "required": [
            "th"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "th-TH": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Thai (Thailand)"
            }
          },
          "required": [
            "th-TH"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tr": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Turkish"
            }
          },
          "required": [
            "tr"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "uk": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Ukrainian"
            }
          },
          "required": [
            "uk"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "vi": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Vietnamese"
            }
          },
          "required": [
            "vi"
          ],
          "unevaluatedProperties": false
        }
      ],
      "description": "Supported language codes"
    },
    "TranscribeDirection": {
      "type": "string",
      "enum": [
        "remote-caller",
        "local-caller"
      ],
      "title": "TranscribeDirection enum"
    },
    "TranscribeSummarizeAction": {
      "type": "object",
      "properties": {
        "summarize": {
          "type": "object",
          "properties": {
            "webhook": {
              "type": "string",
              "description": "The webhook URL to be called."
            },
            "prompt": {
              "type": "string",
              "description": "The prompt for summarizaton."
            }
          },
          "description": "Summarizes the conversation as an object, allowing you to specify the webhook url and prompt for the summary.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "summarize"
      ],
      "title": "TranscribeSummarizeAction object",
      "unevaluatedProperties": false
    },
    "TranslateDirection": {
      "type": "string",
      "enum": [
        "remote-caller",
        "local-caller"
      ],
      "title": "TranslateDirection enum"
    },
    "SummarizeAction": {
      "type": "object",
      "properties": {
        "summarize": {
          "type": "object",
          "properties": {
            "webhook": {
              "type": "string",
              "description": "The webhook URL to be called."
            },
            "prompt": {
              "type": "string",
              "description": "The prompt for summarizaton."
            }
          },
          "description": "Summarizes the conversation as an object, allowing you to specify the webhook url and prompt for the summary.",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "summarize"
      ],
      "title": "SummarizeAction object",
      "unevaluatedProperties": false
    },
    "PayPromptSayAction": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Say",
          "description": "When the action `type` is `Say`, this value is the text to be spoken; when the type is `Play`, it should be a URL to the audio file."
        },
        "phrase": {
          "type": "string",
          "description": "The phrase to speak"
        }
      },
      "required": [
        "type",
        "phrase"
      ],
      "unevaluatedProperties": false
    },
    "PayPromptPlayAction": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Play",
          "description": "When the action `type` is `Say`, this value is the text to be spoken; when the type is `Play`, it should be a URL to the audio file."
        },
        "phrase": {
          "type": "string",
          "format": "uri",
          "pattern": "^(http|https)://",
          "description": "The URL of the audio file to play"
        }
      },
      "required": [
        "type",
        "phrase"
      ],
      "unevaluatedProperties": false
    },
    "PomSectionBodyContent": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "description": "Title for the section"
        },
        "subsections": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/POM"
          },
          "minItems": 1,
          "description": "Optional array of nested subsections"
        },
        "numbered": {
          "type": "boolean",
          "description": "Whether to number the section"
        },
        "numberedBullets": {
          "type": "boolean",
          "description": "Whether to number the bullets"
        },
        "body": {
          "type": "string",
          "description": "Body text for the section"
        },
        "bullets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "description": "Optional array of bullet points"
        }
      },
      "required": [
        "body"
      ],
      "description": "Content model with body text and optional bullets",
      "unevaluatedProperties": false
    },
    "PomSectionBulletsContent": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "description": "Title for the section"
        },
        "subsections": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/POM"
          },
          "minItems": 1,
          "description": "Optional array of nested subsections"
        },
        "numbered": {
          "type": "boolean",
          "description": "Whether to number the section"
        },
        "numberedBullets": {
          "type": "boolean",
          "description": "Whether to number the bullets"
        },
        "body": {
          "type": "string",
          "description": "Body text for the section (optional)"
        },
        "bullets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "description": "Array of bullet points"
        }
      },
      "required": [
        "bullets"
      ],
      "description": "Content model with bullets and optional body",
      "unevaluatedProperties": false
    },
    "ContextSteps": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ContextStepsParams"
          },
          "description": "An array of objects that define the steps in the context. These steps are used to define the flow of the conversation.",
          "title": "steps"
        }
      },
      "required": [
        "steps"
      ],
      "title": "ContextSteps object",
      "unevaluatedProperties": false
    },
    "FunctionParameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "object",
          "description": "The type of argument the AI is passing to the function. Possible values are 'string' and 'object'."
        },
        "properties": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {
            "$ref": "#/$defs/SchemaType"
          },
          "description": "An object containing the property definitions that are passed to the function.\n\nA property definition is a valid JSON schema type with dynamic property names, where:\n- Keys: User-defined strings, that set the property names.\n- Values: A valid property type, which can be one of the following: `string`, `integer`, `number`, `boolean`, `array`, `object`, or `null`."
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of required property names from the `properties` object."
        }
      },
      "required": [
        "type",
        "properties"
      ],
      "unevaluatedProperties": false
    },
    "DataMap": {
      "type": "object",
      "properties": {
        "output": {
          "$ref": "#/$defs/Output",
          "description": "An object that contains a response and a list of actions to be performed upon a SWAIG function call.\nThis functions like a return statement in a function."
        },
        "expressions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Expression"
          },
          "description": "An array of objects that define patterns and corresponding actions."
        },
        "webhooks": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Webhook"
          },
          "description": "An array of objects that define external API calls."
        }
      },
      "title": "DataMap object",
      "unevaluatedProperties": false
    },
    "ContextStepsParams": {
      "anyOf": [
        {
          "$ref": "#/$defs/ContextStepsEnd"
        },
        {
          "$ref": "#/$defs/ContextStepsValidSteps"
        }
      ],
      "title": "ContextStepsParams union"
    },
    "SchemaType": {
      "oneOf": [
        {
          "$ref": "#/$defs/StringProperty"
        },
        {
          "$ref": "#/$defs/IntegerProperty"
        },
        {
          "$ref": "#/$defs/NumberProperty"
        },
        {
          "$ref": "#/$defs/BooleanProperty"
        },
        {
          "$ref": "#/$defs/ArrayProperty"
        },
        {
          "$ref": "#/$defs/ObjectProperty"
        },
        {
          "$ref": "#/$defs/NullProperty"
        },
        {
          "$ref": "#/$defs/OneOfProperty"
        },
        {
          "$ref": "#/$defs/AllOfProperty"
        },
        {
          "$ref": "#/$defs/AnyOfProperty"
        },
        {
          "$ref": "#/$defs/ConstProperty"
        }
      ],
      "title": "Function Parameters Type Union"
    },
    "Output": {
      "type": "object",
      "properties": {
        "response": {
          "type": "string",
          "description": "A static response text or message returned to the AI agent's context."
        },
        "action": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Action"
          },
          "description": "A list of actions to be performed upon matching."
        }
      },
      "required": [
        "response"
      ],
      "title": "Output object",
      "unevaluatedProperties": false
    },
    "Expression": {
      "type": "object",
      "properties": {
        "string": {
          "type": "string",
          "description": "The actual input or value from the user or system."
        },
        "pattern": {
          "type": "string",
          "description": "A regular expression pattern to validate or match the string."
        },
        "output": {
          "$ref": "#/$defs/Output",
          "description": "An object that contains a response and a list of actions to be performed upon a expression match."
        }
      },
      "required": [
        "string",
        "pattern",
        "output"
      ],
      "title": "Expression object",
      "unevaluatedProperties": false
    },
    "Webhook": {
      "type": "object",
      "properties": {
        "expressions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Expression"
          },
          "description": "A list of expressions to be evaluated upon matching.\nIf the following properties are set (foreach, expressions, output), they will be processed in the following order:\n1. foreach\n2. expressions\n3. output"
        },
        "error_keys": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "A string or array of strings that represent the keys to be used for error handling. This will match the key(s) in the response from the API call."
        },
        "url": {
          "type": "string",
          "description": "The endpoint for the external service or API."
        },
        "foreach": {
          "type": "object",
          "properties": {
            "input_key": {
              "type": "string",
              "description": "The key to be used to access the current element in the array."
            },
            "output_key": {
              "type": "string",
              "description": "The key that can be referenced in the output of the `foreach` iteration. The values that are stored from `append` will be stored in this key."
            },
            "max": {
              "type": "integer",
              "description": "The max amount of elements that are iterated over in the array. This will start at the beginning of the array."
            },
            "append": {
              "type": "string",
              "description": "The values to append to the output_key. \nProperties from the object can be referenced and added to the output_key by using the following syntax: \n${this.property_name}.\nThe `this` keyword is used to reference the current object in the array."
            }
          },
          "required": [
            "input_key",
            "output_key",
            "append"
          ],
          "description": "Iterates over an array of objects and processes a output based on each element in the array. Works similarly to JavaScript's forEach method.\nIf the following properties are set (foreach, expressions, output), they will be processed in the following order:\n1. foreach\n2. expressions\n3. output",
          "unevaluatedProperties": false
        },
        "headers": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "Any necessary headers for the API call."
        },
        "method": {
          "anyOf": [
            {
              "type": "string",
              "const": "GET"
            },
            {
              "type": "string",
              "const": "POST"
            },
            {
              "type": "string",
              "const": "PUT"
            },
            {
              "type": "string",
              "const": "DELETE"
            }
          ],
          "description": "The HTTP method (GET, POST, etc.) for the API call."
        },
        "input_args_as_params": {
          "type": "boolean",
          "description": "A boolean to determine if the input arguments should be passed as parameters."
        },
        "params": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "An object of any necessary parameters for the API call. The key is the parameter name and the value is the parameter value."
        },
        "require_args": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "A string or array of strings that represent the `arguments` that are required to make the webhook request."
        },
        "output": {
          "$ref": "#/$defs/Output",
          "description": "An object that contains a response and a list of actions to be performed upon completion of the webhook request.\nIf the following properties are set (foreach, expressions, output), they will be processed in the following order:\n1. foreach\n2. expressions\n3. output"
        }
      },
      "required": [
        "url"
      ],
      "title": "Webhook object",
      "unevaluatedProperties": false
    },
    "ContextStepsEnd": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^(?!next$).*$",
          "description": "The name of the step. The name must be unique within the context. The name is used for referencing the step in the context."
        },
        "text": {
          "type": "string",
          "description": "The prompt or instructions given to the AI at this step."
        },
        "step_criteria": {
          "type": "string",
          "description": "The conditions that must be met for the conversation to proceed to the next step. \nIf a condition is not met, the conversation will not proceed to the next step.\nIt's **highly** recommended you create a custom criteria for the step to get the intended behavior.   "
        },
        "functions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings, where each string is the name of a SWAIG.function that can be executed from this step."
        },
        "valid_contexts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of valid contexts that the conversation can transition to from this step."
        },
        "skip_user_turn": {
          "type": "boolean",
          "description": "A boolean value, if set to `true`, will skip the user's turn to respond in the conversation and proceed to the next step."
        },
        "end": {
          "type": "boolean",
          "description": "A boolean value, if set to `true`, will end the contexts conversation and transition to a normal interaction."
        }
      },
      "required": [
        "name",
        "text"
      ],
      "title": "ContextStepsEnd object",
      "unevaluatedProperties": false
    },
    "ContextStepsValidSteps": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^(?!next$).*$",
          "description": "The name of the step. The name must be unique within the context. The name is used for referencing the step in the context."
        },
        "text": {
          "type": "string",
          "description": "The prompt or instructions given to the AI at this step."
        },
        "step_criteria": {
          "type": "string",
          "description": "The conditions that must be met for the conversation to proceed to the next step. \nIf a condition is not met, the conversation will not proceed to the next step.\nIt's **highly** recommended you create a custom criteria for the step to get the intended behavior.   "
        },
        "functions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings, where each string is the name of a SWAIG.function that can be executed from this step."
        },
        "valid_contexts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of valid contexts that the conversation can transition to from this step."
        },
        "skip_user_turn": {
          "type": "boolean",
          "description": "A boolean value, if set to `true`, will skip the user's turn to respond in the conversation and proceed to the next step."
        },
        "valid_steps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of valid steps that the conversation can proceed to from this step.\nIf the array is empty, or the `valid_steps` key is not present, the conversation will proceed to the next step in the context."
        }
      },
      "required": [
        "name",
        "text"
      ],
      "title": "ContextStepsValidSteps object",
      "unevaluatedProperties": false
    },
    "StringProperty": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the property."
        },
        "nullable": {
          "type": "boolean",
          "description": "Whether the property can be null."
        },
        "type": {
          "type": "string",
          "const": "string",
          "description": "The type of parameter(s) the AI is passing to the function."
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings that are the possible values"
        },
        "default": {
          "type": "string",
          "description": "The default string value"
        },
        "pattern": {
          "type": "string",
          "description": "Regular expression pattern"
        },
        "format": {
          "$ref": "#/$defs/StringFormat",
          "description": "String format (email, date-time, etc.)"
        }
      },
      "required": [
        "type"
      ],
      "description": "Base interface for all property types",
      "title": "String Function Property"
    },
    "IntegerProperty": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the property."
        },
        "nullable": {
          "type": "boolean",
          "description": "Whether the property can be null."
        },
        "type": {
          "type": "string",
          "const": "integer",
          "description": "The type of parameter(s) the AI is passing to the function."
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "An array of integers that are the possible values"
        },
        "default": {
          "type": "integer",
          "description": "The default integer value"
        }
      },
      "required": [
        "type"
      ],
      "description": "Base interface for all property types",
      "title": "Integer Function Property"
    },
    "NumberProperty": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the property."
        },
        "nullable": {
          "type": "boolean",
          "description": "Whether the property can be null."
        },
        "type": {
          "type": "string",
          "const": "number",
          "description": "The type of parameter(s) the AI is passing to the function."
        },
        "enum": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ]
          },
          "description": "An array of integers that are the possible values"
        },
        "default": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "number"
            }
          ],
          "description": "The default integer value"
        }
      },
      "required": [
        "type"
      ],
      "description": "Base interface for all property types",
      "title": "Number Function Property"
    },
    "BooleanProperty": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the property."
        },
        "nullable": {
          "type": "boolean",
          "description": "Whether the property can be null."
        },
        "type": {
          "type": "string",
          "const": "boolean",
          "description": "The type of parameter(s) the AI is passing to the function."
        },
        "default": {
          "type": "boolean",
          "description": "The default boolean value"
        }
      },
      "required": [
        "type"
      ],
      "description": "Base interface for all property types",
      "title": "Boolean Function Property"
    },
    "ArrayProperty": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the property."
        },
        "nullable": {
          "type": "boolean",
          "description": "Whether the property can be null."
        },
        "type": {
          "type": "string",
          "const": "array",
          "description": "The type of parameter(s) the AI is passing to the function."
        },
        "default": {
          "type": "array",
          "items": {},
          "description": "The default array value"
        },
        "items": {
          "description": "Schema for array items",
          "$ref": "#/$defs/SchemaType"
        }
      },
      "required": [
        "type",
        "items"
      ],
      "description": "Base interface for all property types",
      "title": "Array Function Property"
    },
    "ObjectProperty": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the property."
        },
        "nullable": {
          "type": "boolean",
          "description": "Whether the property can be null."
        },
        "type": {
          "type": "string",
          "const": "object",
          "description": "The type of parameter(s) the AI is passing to the function."
        },
        "default": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "The default object value"
        },
        "properties": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {
            "$ref": "#/$defs/SchemaType"
          },
          "description": "Nested properties"
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required property names"
        }
      },
      "required": [
        "type"
      ],
      "description": "Base interface for all property types",
      "title": "Object Function Property"
    },
    "NullProperty": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "null",
          "description": "The type of parameter(s) the AI is passing to the function."
        },
        "description": {
          "type": "string",
          "description": "A description of the property."
        }
      },
      "required": [
        "type",
        "description"
      ],
      "title": "Null Function Property"
    },
    "OneOfProperty": {
      "type": "object",
      "properties": {
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SchemaType"
          },
          "description": "An array of schemas where exactly one of the schemas must be valid."
        }
      },
      "required": [
        "oneOf"
      ],
      "title": "oneOf Property"
    },
    "AllOfProperty": {
      "type": "object",
      "properties": {
        "allOf": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SchemaType"
          },
          "description": "An array of schemas where all of the schemas must be valid."
        }
      },
      "required": [
        "allOf"
      ],
      "title": "allOf Property"
    },
    "AnyOfProperty": {
      "type": "object",
      "properties": {
        "anyOf": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SchemaType"
          },
          "description": "An array of schemas where at least one of the schemas must be valid."
        }
      },
      "required": [
        "anyOf"
      ],
      "title": "anyOf Property"
    },
    "ConstProperty": {
      "type": "object",
      "properties": {
        "const": {
          "description": "A constant value that can be passed to the function."
        }
      },
      "required": [
        "const"
      ],
      "title": "Const Property"
    },
    "Action": {
      "anyOf": [
        {
          "$ref": "#/$defs/SWMLAction"
        },
        {
          "$ref": "#/$defs/ContextSwitchAction"
        },
        {
          "$ref": "#/$defs/PlaybackBGAction"
        },
        {
          "$ref": "#/$defs/SayAction"
        },
        {
          "$ref": "#/$defs/SetGlobalDataAction"
        },
        {
          "$ref": "#/$defs/SetMetaDataAction"
        },
        {
          "$ref": "#/$defs/StopAction"
        },
        {
          "$ref": "#/$defs/StopPlaybackBGAction"
        },
        {
          "$ref": "#/$defs/ToggleFunctionsAction"
        },
        {
          "$ref": "#/$defs/UnsetGlobalDataAction"
        },
        {
          "$ref": "#/$defs/UnsetMetaDataAction"
        },
        {
          "$ref": "#/$defs/UserInputAction"
        }
      ],
      "title": "Action union"
    },
    "StringFormat": {
      "type": "string",
      "enum": [
        "date_time",
        "time",
        "date",
        "duration",
        "email",
        "hostname",
        "ipv4",
        "ipv6",
        "uri",
        "uuid"
      ]
    },
    "SWMLAction": {
      "type": "object",
      "properties": {
        "SWML": {
          "description": "A SWML object to be executed.",
          "title": "SWML",
          "$ref": "SWMLObject.json"
        }
      },
      "required": [
        "SWML"
      ],
      "title": "SWMLAction object",
      "unevaluatedProperties": false
    },
    "ContextSwitchAction": {
      "type": "object",
      "properties": {
        "context_switch": {
          "type": "object",
          "properties": {
            "system_prompt": {
              "type": "string",
              "description": "The instructions to send to the agent. Default is not set."
            },
            "consolidate": {
              "type": "boolean",
              "description": "Whether to consolidate the context. Default is `false`."
            },
            "user_prompt": {
              "type": "string",
              "description": "A string serving as simulated user input for the AI Agent.\nDuring a context_switch in the AI's prompt, the user_prompt offers the AI pre-established context or guidance.\nDefault is not set"
            }
          },
          "required": [
            "system_prompt"
          ],
          "description": "A JSON object containing the context to switch to. Default is not set.",
          "title": "context_switch",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "context_switch"
      ],
      "title": "ContextSwitchAction object",
      "unevaluatedProperties": false
    },
    "PlaybackBGAction": {
      "type": "object",
      "properties": {
        "playback_bg": {
          "type": "object",
          "properties": {
            "file": {
              "type": "string",
              "format": "uri",
              "description": "URL or filepath of the audio file to play."
            },
            "wait": {
              "type": "boolean",
              "description": "Whether to wait for the audio file to finish playing before continuing. Default is `false`."
            }
          },
          "required": [
            "file"
          ],
          "description": "A JSON object containing the audio file to play.",
          "title": "playback_bg",
          "unevaluatedProperties": false
        }
      },
      "required": [
        "playback_bg"
      ],
      "title": "PlaybackBGAction object",
      "unevaluatedProperties": false
    },
    "SayAction": {
      "type": "object",
      "properties": {
        "say": {
          "type": "string",
          "description": "A message to be spoken by the AI agent.",
          "title": "say"
        }
      },
      "required": [
        "say"
      ],
      "title": "SayAction object",
      "unevaluatedProperties": false
    },
    "SetGlobalDataAction": {
      "type": "object",
      "properties": {
        "set_global_data": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "A JSON object containing any global data, as a key-value map. This action sets the data in the `global_data` to be globally referenced.",
          "title": "set_global_data"
        }
      },
      "required": [
        "set_global_data"
      ],
      "title": "SetGlobalDataAction object",
      "unevaluatedProperties": false
    },
    "SetMetaDataAction": {
      "type": "object",
      "properties": {
        "set_meta_data": {
          "type": "object",
          "properties": {},
          "unevaluatedProperties": {},
          "description": "A JSON object containing any metadata, as a key-value map. This action sets the data in the `meta_data` to be referenced locally in the function.",
          "title": "set_meta_data"
        }
      },
      "required": [
        "set_meta_data"
      ],
      "title": "SetMetaDataAction object",
      "unevaluatedProperties": false
    },
    "StopAction": {
      "type": "object",
      "properties": {
        "stop": {
          "type": "boolean",
          "description": "Whether to stop the conversation.",
          "title": "stop"
        }
      },
      "required": [
        "stop"
      ],
      "title": "StopAction object",
      "unevaluatedProperties": false
    },
    "StopPlaybackBGAction": {
      "type": "object",
      "properties": {
        "stop_playback_bg": {
          "type": "boolean",
          "description": "Whether to stop the background audio file.",
          "title": "stop_playback_bg"
        }
      },
      "required": [
        "stop_playback_bg"
      ],
      "title": "StopPlaybackBGAction object",
      "unevaluatedProperties": false
    },
    "ToggleFunctionsAction": {
      "type": "object",
      "properties": {
        "toggle_functions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "description": "Whether to activate or deactivate the functions. Default is `true`"
              },
              "function": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ],
                "description": "The function names to toggle."
              }
            },
            "required": [
              "active",
              "function"
            ],
            "unevaluatedProperties": false
          },
          "description": "Whether to toggle the functions on or off.",
          "title": "toggle_functions"
        }
      },
      "required": [
        "toggle_functions"
      ],
      "title": "ToggleFunctionsAction object",
      "unevaluatedProperties": false
    },
    "UnsetGlobalDataAction": {
      "type": "object",
      "properties": {
        "unset_global_data": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": false
            }
          ],
          "description": "The key of the global data to unset from the `global_data`. You can also reset the `global_data` by passing in a new object.",
          "title": "unset_global_data"
        }
      },
      "required": [
        "unset_global_data"
      ],
      "title": "UnsetGlobalDataAction object",
      "unevaluatedProperties": false
    },
    "UnsetMetaDataAction": {
      "type": "object",
      "properties": {
        "unset_meta_data": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {},
              "unevaluatedProperties": false
            }
          ],
          "description": "The key of the local data to unset from the `meta_data`. You can also reset the `meta_data` by passing in a new object.",
          "title": "unset_meta_data"
        }
      },
      "required": [
        "unset_meta_data"
      ],
      "title": "UnsetMetaDataAction object",
      "unevaluatedProperties": false
    },
    "UserInputAction": {
      "type": "object",
      "properties": {
        "user_input": {
          "type": "string",
          "description": "Used to inject text into the users queue as if they input the data themselves.",
          "title": "user_input"
        }
      },
      "required": [
        "user_input"
      ],
      "title": "UserInputAction object",
      "unevaluatedProperties": false
    }
  },
  "unevaluatedProperties": false
}